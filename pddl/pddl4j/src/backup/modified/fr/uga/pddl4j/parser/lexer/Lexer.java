/* Lexer.java */
/* Generated By:JavaCC: Do not edit this line. Lexer.java */
package fr.uga.pddl4j.parser.lexer;

import fr.uga.pddl4j.parser.Connective;
import fr.uga.pddl4j.parser.DerivedPredicate;
import fr.uga.pddl4j.parser.ErrorManager;
import fr.uga.pddl4j.parser.Parser;
import fr.uga.pddl4j.parser.Exp;
import fr.uga.pddl4j.parser.Domain;
import fr.uga.pddl4j.parser.Problem;
import fr.uga.pddl4j.parser.NamedTypedList;
import fr.uga.pddl4j.parser.Op;
import fr.uga.pddl4j.parser.RequireKey;
import fr.uga.pddl4j.parser.Symbol;
import fr.uga.pddl4j.parser.TypedSymbol;

import java.io.FileInputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class Lexer implements LexerConstants
{

    private static final int PRIMITIVE_TYPE = 0;
    private static final int VARIABLE = 1;
    private static final int CONSTANT = 2;
    private static final int TERM = 3;
    private static final int ATOMIC_FUNCTION_SKELETON = 4;
    private static final int PARSER_PROBLEM = 5;
    private static final int PARSER_DOMAIN = 5;

    private Domain domain = null;

    public Domain getDomain()
    {
        return this.domain;
    }

    private Problem problem = null;

    public Problem getProblem()
    {
        return this.problem;
    }

    private File file;

    public File getFile()
    {
        return this.file;
    }

    public void setFile(File file)
    {
        this.file = file;
    }

    private ErrorManager mgr;

    public ErrorManager getErrorManager()
    {
        return this.mgr;
    }

    public void setErrorManager(ErrorManager mgr)
    {
        this.mgr = mgr;
    }

    private void error(Throwable e, int line, int column)
    {
        String message = new String();
        if (e.getClass().equals(TokenMgrError.class))
        {
            String[] tmp = e.getMessage().split(" ");
            int l = -1;
            int c = -1;
            int i = 0;
            for (i = 0; i < tmp.length; i++)
            {
                if (tmp[i].equals("line") && i + 1 < tmp.length)
                {
                    l = Integer.parseInt(
                            tmp[i + 1].substring(0, tmp[i + 1].length() - 1));
                }
                if (tmp[i].equals("column") && i + 1 < tmp.length)
                {
                    c = Integer.parseInt(
                            tmp[i + 1].substring(0, tmp[i + 1].length() - 1));
                }
            }
            message = e.getMessage().split(".  ")[1];
            this.mgr.logLexicalError(message, this.file, l, c);
        }
        else if (e.getClass().equals(ParseException.class))
        {
            ParseException pe = (ParseException) e;
            message = generateErrorMesssage(pe);
            this.mgr.logLexicalError(message, this.file,
                    pe.currentToken.beginLine, pe.currentToken.beginColumn);
        }
        this.skipToNextBlock();
    }

    public boolean isRequirement(RequireKey key)
    {
        if (domain != null && this.problem != null)
        {
            return this.domain.getRequirements().contains(key)
                    || this.problem.getRequirements().contains(key);
        }
        else if (domain != null && this.problem == null)
        {
            return this.domain.getRequirements().contains(key);
        }
        else if (problem != null && this.domain == null)
        {
            return this.problem.getRequirements().contains(key);
        }
        else
        {
            return false;
        }
    }

    public Set<RequireKey> getRequirements()
    {
        return this.domain.getRequirements();
    }

    private void skipToNextBlock()
    {
        Token t1;
        Token t2;
        do
        {
            t1 = getNextToken();
            t2 = getToken(2);
        }
        while (t1.kind != EOF && t2 != null && t2.kind != REQUIREMENTS
                && t2.kind != PREDICATES && t2.kind != TYPES
                && t2.kind != CONSTANTS && t2.kind != FUNCTIONS
                && t2.kind != ACTION && t2.kind != DURATIVE_ACTION
                && t2.kind != DERIVED && t2.kind != OBJECTS && t2.kind != INIT
                && t2.kind != GOAL && t2.kind != METRIC && t2.kind != EOF);
    }

    private String generateErrorMesssage(ParseException pe)
    {
        StringBuffer expected = new StringBuffer();
        boolean expectedSeq = false;
        int maxSize = 0;
        for (int i = 0; i < pe.expectedTokenSequences.length; i++)
        {
            if (maxSize < pe.expectedTokenSequences[i].length)
            {
                maxSize = pe.expectedTokenSequences[i].length;
            }
            for (int j = 0; j < pe.expectedTokenSequences[i].length; j++)
            {
                expected.append(pe.tokenImage[pe.expectedTokenSequences[i][j]])
                        .append(" ");
                expectedSeq = true;
            }
            if (pe.expectedTokenSequences[i][pe.expectedTokenSequences[i].length
                    - 1] != 0)
            {
                expected.append("...");
            }
            if (i < pe.expectedTokenSequences.length - 1)
            {
                expected.append("\n").append("    ");
            }
        }
        String retval = "unexpected token \"" + pe.currentToken.next.image
                + "\".";
        if (expectedSeq)
        {
            if (pe.expectedTokenSequences.length == 1)
            {
                retval += "\nWas expecting:" + "\n" + "    ";
            }
            else
            {
                retval += "\nWas expecting one of:" + "\n" + "    ";
            }
            retval += expected.toString();
        }
        return retval;
    }

    final public Token right_bracket() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(RIGHT_BRACKET);
        {
            if ("" != null)
                return t;
        }
        throw new Error("Missing return statement in function");
    }

    final public Token left_bracket() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(LEFT_BRACKET);
        {
            if ("" != null)
                return t;
        }
        throw new Error("Missing return statement in function");
    }

    final public void domain() throws ParseException
    {
        Exp node = null;
        Symbol name = null;
        try
        {
            left_bracket();
            jj_consume_token(DEFINE);
            left_bracket();
            jj_consume_token(DOMAIN);
            name = domain_name();
            this.domain = new Domain(name);
            right_bracket();
            if (jj_2_1(2))
            {
                require_def(Lexer.PARSER_DOMAIN);
            }
            else
            {
                ;
            }
            if (jj_2_2(2) && (this.isRequirement(RequireKey.TYPING)))
            {
                type_def();
            }
            else
            {
                ;
            }
            if (jj_2_3(2))
            {
                constants_def();
            }
            else
            {
                ;
            }
            if (jj_2_4(2))
            {
                predicates_def();
            }
            else
            {
                ;
            }
            if (jj_2_5(2) && (this.isRequirement(RequireKey.FLUENTS)
                    || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                    || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                    || this.isRequirement(RequireKey.ACTION_COSTS)))
            {
                functions_def();
            }
            else
            {
                ;
            }
            if (jj_2_6(2) && (this.isRequirement(RequireKey.CONSTRAINTS)))
            {
                constraints(Lexer.PARSER_DOMAIN);
            }
            else
            {
                ;
            }
            label_1: while (true)
            {
                if (jj_2_7(1))
                {
                    ;
                }
                else
                {
                    break label_1;
                }
                structure_def();
            }
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public void domain_and_problem() throws ParseException
    {
        domain();
        problem();
    }

    final public void require_def(int type) throws ParseException
    {
        Token t = null;
        Set<RequireKey> requirements = null;
        if (type == Lexer.PARSER_DOMAIN)
        {
            this.domain.addRequirement(RequireKey.STRIPS);
        }
        try
        {
            t = left_bracket();
            jj_consume_token(REQUIREMENTS);
            label_2: while (true)
            {
                requirements = require_key();
                if (type == Lexer.PARSER_DOMAIN)
                {
                    for (RequireKey r : requirements)
                    {
                        this.domain.addRequirement(r);
                    }
                }
                else
                {
                    for (RequireKey r : requirements)
                    {
                        this.problem.addRequirement(r);
                    }
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case STRIPS:
                case TYPING:
                case NEGATIVE_PRECONDITIONS:
                case DISJUNCTIVE_PRECONDITIONS:
                case EQUALITY:
                case EXISTENTIAL_PRECONDITIONS:
                case UNIVERSAL_PRECONDITIONS:
                case QUANTIFIED_PRECONDITIONS:
                case CONDITIONAL_EFFECTS:
                case ACTION_COSTS:
                case FLUENTS:
                case NUMERIC_FLUENTS:
                case OBJECT_FLUENTS:
                case GOAL_UTILITIES:
                case ADL:
                case DURATIVE_ACTIONS:
                case DERIVED_PREDICATES:
                case TIMED_INITIAL_LITERALS:
                case PREFERENCES:
                case CONSTRAINTS:
                case CONTINUS_EFFECTS:
                case DURATION_INEQUALITIES:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_2;
                }
            }
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public Set<RequireKey> require_key() throws ParseException
    {
        Set<RequireKey> requirements = new LinkedHashSet<RequireKey>();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case STRIPS:
        {
            jj_consume_token(STRIPS);
            requirements.add(RequireKey.STRIPS);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case TYPING:
        {
            jj_consume_token(TYPING);
            requirements.add(RequireKey.TYPING);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case NEGATIVE_PRECONDITIONS:
        {
            jj_consume_token(NEGATIVE_PRECONDITIONS);
            requirements.add(RequireKey.NEGATIVE_PRECONDITIONS);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case DISJUNCTIVE_PRECONDITIONS:
        {
            jj_consume_token(DISJUNCTIVE_PRECONDITIONS);
            requirements.add(RequireKey.DISJUNCTIVE_PRECONDITIONS);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case EQUALITY:
        {
            jj_consume_token(EQUALITY);
            requirements.add(RequireKey.EQUALITY);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case EXISTENTIAL_PRECONDITIONS:
        {
            jj_consume_token(EXISTENTIAL_PRECONDITIONS);
            requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
            if (requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS))
            {
                requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
            }
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case UNIVERSAL_PRECONDITIONS:
        {
            jj_consume_token(UNIVERSAL_PRECONDITIONS);
            requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
            if (requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS))
            {
                requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
            }
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case QUANTIFIED_PRECONDITIONS:
        {
            jj_consume_token(QUANTIFIED_PRECONDITIONS);
            requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
            requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
            requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case CONDITIONAL_EFFECTS:
        {
            jj_consume_token(CONDITIONAL_EFFECTS);
            requirements.add(RequireKey.CONDITIONAL_EFFECTS);
            if (requirements.contains(RequireKey.STRIPS)
                    && requirements.contains(RequireKey.TYPING)
                    && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                    && requirements.contains(RequireKey.EQUALITY)
                    && requirements
                            .contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                    && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                    && requirements
                            .contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                    && requirements.contains(RequireKey.CONDITIONAL_EFFECTS))
            {
                requirements.add(RequireKey.ADL);
            }
            break;
        }
        case FLUENTS:
        {
            jj_consume_token(FLUENTS);
            requirements.add(RequireKey.FLUENTS);
            requirements.add(RequireKey.NUMERIC_FLUENTS);
            requirements.add(RequireKey.OBJECT_FLUENTS);
            break;
        }
        case NUMERIC_FLUENTS:
        {
            jj_consume_token(NUMERIC_FLUENTS);
            requirements.add(RequireKey.NUMERIC_FLUENTS);
            if (requirements.contains(RequireKey.OBJECT_FLUENTS))
            {
                requirements.add(RequireKey.FLUENTS);
            }
            break;
        }
        case OBJECT_FLUENTS:
        {
            jj_consume_token(OBJECT_FLUENTS);
            requirements.add(RequireKey.OBJECT_FLUENTS);
            if (requirements.contains(RequireKey.NUMERIC_FLUENTS))
            {
                requirements.add(RequireKey.FLUENTS);
            }
            break;
        }
        case GOAL_UTILITIES:
        {
            jj_consume_token(GOAL_UTILITIES);
            requirements.add(RequireKey.GOAL_UTILITIES);
            break;
        }
        case ADL:
        {
            jj_consume_token(ADL);
            requirements.add(RequireKey.ADL);
            requirements.add(RequireKey.STRIPS);
            requirements.add(RequireKey.TYPING);
            requirements.add(RequireKey.NEGATIVE_PRECONDITIONS);
            requirements.add(RequireKey.DISJUNCTIVE_PRECONDITIONS);
            requirements.add(RequireKey.EQUALITY);
            requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
            requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
            requirements.add(RequireKey.CONDITIONAL_EFFECTS);
            break;
        }
        case ACTION_COSTS:
        {
            jj_consume_token(ACTION_COSTS);
            requirements.add(RequireKey.ACTION_COSTS);
            break;
        }
        case DURATIVE_ACTIONS:
        {
            jj_consume_token(DURATIVE_ACTIONS);
            requirements.add(RequireKey.DURATIVE_ACTIONS);
            requirements.add(RequireKey.DURATION_INEQUALITIES);
            break;
        }
        case DERIVED_PREDICATES:
        {
            jj_consume_token(DERIVED_PREDICATES);
            requirements.add(RequireKey.DERIVED_PREDICATES);
            break;
        }
        case TIMED_INITIAL_LITERALS:
        {
            jj_consume_token(TIMED_INITIAL_LITERALS);
            requirements.add(RequireKey.TIMED_INITIAL_LITERALS);
            break;
        }
        case PREFERENCES:
        {
            jj_consume_token(PREFERENCES);
            requirements.add(RequireKey.PREFERENCES);
            break;
        }
        case CONSTRAINTS:
        {
            jj_consume_token(CONSTRAINTS);
            requirements.add(RequireKey.CONSTRAINTS);
            break;
        }
        case CONTINUS_EFFECTS:
        {
            jj_consume_token(CONTINUS_EFFECTS);
            requirements.add(RequireKey.CONTINOUS_EFFECTS);
            break;
        }
        case DURATION_INEQUALITIES:
        {
            jj_consume_token(DURATION_INEQUALITIES);
            requirements.add(RequireKey.DURATION_INEQUALITIES);
            break;
        }
        default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return requirements;
        }
        throw new Error("Missing return statement in function");
    }

    final public void type_def() throws ParseException
    {
        List<TypedSymbol> typedList = null;
        try
        {
            left_bracket();
            jj_consume_token(TYPES);
            typedList = typed_list(Lexer.PRIMITIVE_TYPE);
            right_bracket();
            for (TypedSymbol type : typedList)
            {
                this.domain.addType(type);
            }
            // for (TypedSymbol token : this.types_def) {
            // if (token.getTypes().isEmpty()) {
            // token.addType(Parser.OBJECT);
            // }
            // }

        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public List<TypedSymbol> typed_list(int kind) throws ParseException
    {
        Symbol t;
        List<Symbol> types = null;
        List<TypedSymbol> typedList = new ArrayList<TypedSymbol>();
        List<Symbol> tmp = new ArrayList<Symbol>();
        List<TypedSymbol> nextTypedList = null;
        if (kind == Lexer.PRIMITIVE_TYPE)
        {
            label_3: while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case NUMBER_TYPE:
                case OBJECT_TYPE:
                case SYMBOL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_3;
                }
                t = primitive_type();
                tmp.add(t);
            }
            if (jj_2_8(1) && (this.isRequirement(RequireKey.TYPING)))
            {
                jj_consume_token(SUB);
                types = type();
                nextTypedList = typed_list(kind);
            }
            else
            {
                ;
            }
            if (types == null)
            {
                types = new ArrayList<Symbol>();
            }
            for (Symbol s : tmp)
            {
                TypedSymbol ts = new TypedSymbol(s);
                for (Symbol type : types)
                {
                    ts.addType(type);
                }
                typedList.add(ts);
            }
            if (nextTypedList != null)
            {
                typedList.addAll(nextTypedList);
            }
        }
        else if (kind == Lexer.CONSTANT)
        {
            label_4: while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case AT:
                case START:
                case END:
                case OVER:
                case SYMBOL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    break label_4;
                }
                t = constant();
                tmp.add(t);
            }
            if (jj_2_9(1) && (this.isRequirement(RequireKey.TYPING)))
            {
                jj_consume_token(SUB);
                types = type();
                nextTypedList = typed_list(kind);
            }
            else
            {
                ;
            }
            if (types == null)
            {
                types = new ArrayList<Symbol>();
            }
            for (Symbol s : tmp)
            {
                TypedSymbol ts = new TypedSymbol(s);
                for (Symbol type : types)
                {
                    ts.addType(type);
                }
                typedList.add(ts);
            }
            if (nextTypedList != null)
            {
                typedList.addAll(nextTypedList);
            }
        }
        else if (kind == Lexer.VARIABLE)
        {
            label_5: while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case VARIABLE_SYMBOL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    break label_5;
                }
                t = variable();
                tmp.add(t);
            }
            if (jj_2_10(1) && (this.isRequirement(RequireKey.TYPING)))
            {
                jj_consume_token(SUB);
                types = type();
                nextTypedList = typed_list(kind);
            }
            else
            {
                ;
            }
            if (types == null)
            {
                types = new ArrayList<Symbol>();
                types.add(Parser.OBJECT);
            }
            for (Symbol s : tmp)
            {
                TypedSymbol ts = new TypedSymbol(s);
                for (Symbol type : types)
                {
                    ts.addType(type);
                }
                typedList.add(ts);
            }
            if (nextTypedList != null)
            {
                typedList.addAll(nextTypedList);
            }
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return typedList;
        }
        throw new Error("Missing return statement in function");
    }

    final public List<Symbol> type() throws ParseException
    {
        Symbol s;
        List<Symbol> type = new ArrayList<Symbol>();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case LEFT_BRACKET:
        {
            left_bracket();
            jj_consume_token(EITHER);
            label_6: while (true)
            {
                s = primitive_type();
                type.add(s);
                if (jj_2_11(2))
                {
                    ;
                }
                else
                {
                    break label_6;
                }
            }
            right_bracket();
            break;
        }
        case NUMBER_TYPE:
        case OBJECT_TYPE:
        case SYMBOL:
        {
            s = primitive_type();
            type.add(s);
            break;
        }
        default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return type;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol primitive_type() throws ParseException
    {
        Token t = token;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case OBJECT_TYPE:
        {
            t = jj_consume_token(OBJECT_TYPE);
            break;
        }
        case NUMBER_TYPE:
        {
            t = jj_consume_token(NUMBER_TYPE);
            break;
        }
        case SYMBOL:
        {
            t = jj_consume_token(SYMBOL);
            break;
        }
        default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.TYPE, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public void constants_def() throws ParseException
    {
        List<TypedSymbol> typedList = null;
        try
        {
            left_bracket();
            jj_consume_token(CONSTANTS);
            typedList = typed_list(Lexer.CONSTANT);
            right_bracket();
            for (TypedSymbol constant : typedList)
            {
                this.domain.addConstant(constant);
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public Symbol constant() throws ParseException
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            t = jj_consume_token(SYMBOL);
            break;
        }
        case AT:
        {
            t = jj_consume_token(AT);
            break;
        }
        case END:
        {
            t = jj_consume_token(END);
            break;
        }
        case START:
        {
            t = jj_consume_token(START);
            break;
        }
        case OVER:
        {
            t = jj_consume_token(OVER);
            break;
        }
        default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.CONSTANT, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public void predicates_def() throws ParseException
    {
        NamedTypedList predicate = null;
        try
        {
            left_bracket();
            jj_consume_token(PREDICATES);
            label_7: while (true)
            {
                predicate = atomic_formula_skeleton();
                this.domain.addPredicate(predicate);
                if (jj_2_12(2))
                {
                    ;
                }
                else
                {
                    break label_7;
                }
            }
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public NamedTypedList atomic_formula_skeleton() throws ParseException
    {
        Symbol predicate = null;
        List<TypedSymbol> typedList = null;
        jj_consume_token(LEFT_BRACKET);
        predicate = predicate();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        NamedTypedList l = new NamedTypedList(predicate);
        for (TypedSymbol s : typedList)
        {
            l.add(s);
        }
        {
            if ("" != null)
                return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol predicate() throws ParseException
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            t = jj_consume_token(SYMBOL);
            break;
        }
        case AT:
        {
            t = jj_consume_token(AT);
            break;
        }
        case END:
        {
            t = jj_consume_token(END);
            break;
        }
        case START:
        {
            t = jj_consume_token(START);
            break;
        }
        case OVER:
        {
            t = jj_consume_token(OVER);
            break;
        }
        default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.PREDICATE, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol variable() throws ParseException
    {
        Token t = token;
        t = jj_consume_token(VARIABLE_SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.VARIABLE, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public void functions_def() throws ParseException
    {
        List<NamedTypedList> functions = null;
        try
        {
            left_bracket();
            jj_consume_token(FUNCTIONS);
            functions = function_typed_list(Lexer.ATOMIC_FUNCTION_SKELETON);
            right_bracket();
            for (NamedTypedList function : functions)
            {
                this.domain.addFunction(function);
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public NamedTypedList atomic_function_skeleton() throws ParseException
    {
        Symbol functor = null;
        List<TypedSymbol> typedList = null;
        left_bracket();
        functor = functor();
        typedList = typed_list(Lexer.VARIABLE);
        jj_consume_token(RIGHT_BRACKET);
        NamedTypedList l = new NamedTypedList(functor);
        for (TypedSymbol s : typedList)
        {
            l.add(s);
        }
        {
            if ("" != null)
                return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol functor() throws ParseException
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            t = jj_consume_token(SYMBOL);
            break;
        }
        case TOTAL_COST:
        {
            t = jj_consume_token(TOTAL_COST);
            break;
        }
        case AT:
        {
            t = jj_consume_token(AT);
            break;
        }
        case END:
        {
            t = jj_consume_token(END);
            break;
        }
        case START:
        {
            t = jj_consume_token(START);
            break;
        }
        case OVER:
        {
            t = jj_consume_token(OVER);
            break;
        }
        default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.FUNCTOR, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public List<NamedTypedList> function_typed_list(int type)
            throws ParseException
    {
        NamedTypedList namedTypedList = null;
        List<NamedTypedList> typedListList = new ArrayList<NamedTypedList>();
        List<NamedTypedList> nextNamedTypedList = null;
        List<Symbol> typeList = null;
        label_8: while (true)
        {
            if (jj_2_13(2))
            {
                ;
            }
            else
            {
                break label_8;
            }
            namedTypedList = atomic_function_skeleton();
            typedListList.add(namedTypedList);
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SUB:
        {
            jj_consume_token(SUB);
            typeList = function_type();
            for (Symbol t : typeList)
            {
                namedTypedList.addType(t);
            }
            nextNamedTypedList = function_typed_list(type);
            typedListList.addAll(nextNamedTypedList);
            break;
        }
        default:
            jj_la1[10] = jj_gen;
            ;
        }
        // To keep compatibility with PDDL 3.0: if no type is set it is number
        for (NamedTypedList ntl : typedListList)
        {
            if (ntl.getTypes().isEmpty())
            {
                ntl.addType(Parser.NUMBER);
            }
        }
        {
            if ("" != null)
                return typedListList;
        }
        throw new Error("Missing return statement in function");
    }

    final public List<Symbol> function_type() throws ParseException
    {
        Token token;
        Symbol symbol;
        List<Symbol> typesList = new ArrayList<Symbol>();
        if (jj_2_14(2) && (this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.ACTION_COSTS)))
        {
            token = jj_consume_token(NUMBER_TYPE);
            typesList.add(new Symbol(Symbol.Kind.TYPE, token));
            {
                if ("" != null)
                    return typesList;
            }
        }
        else if (jj_2_15(2) && ((this.isRequirement(RequireKey.TYPING)
                && this.isRequirement(RequireKey.OBJECT_FLUENTS))
                || this.isRequirement(RequireKey.FLUENTS)))
        {
            typesList = type();
            {
                if ("" != null)
                    return typesList;
            }
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp con_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_16(2))
        {
            node = and_con_gd();
        }
        else if (jj_2_17(2))
        {
            node = forall_con_gd();
        }
        else if (jj_2_18(2))
        {
            node = at_end_con_gd();
        }
        else if (jj_2_19(2))
        {
            node = always_con_gd();
        }
        else if (jj_2_20(2))
        {
            node = sometime_con_gd();
        }
        else if (jj_2_21(2))
        {
            node = within_con_gd();
        }
        else if (jj_2_22(2))
        {
            node = at_most_once_con_gd();
        }
        else if (jj_2_23(2))
        {
            node = sometime_after_con_gd();
        }
        else if (jj_2_24(2))
        {
            node = sometime_before_con_gd();
        }
        else if (jj_2_25(2))
        {
            node = always_within_con_gd();
        }
        else if (jj_2_26(2))
        {
            node = hold_during_con_gd();
        }
        else if (jj_2_27(2))
        {
            node = hold_after_con_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.AND);
        Exp child = null;
        left_bracket();
        jj_consume_token(AND);
        label_9: while (true)
        {
            if (jj_2_28(2))
            {
                ;
            }
            else
            {
                break label_9;
            }
            child = con_gd();
            conGD.addChild(child);
        }
        right_bracket();
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.FORALL);
        Exp child = null;
        List<TypedSymbol> typedList = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        child = con_gd();
        right_bracket();
        conGD.setVariables(typedList);
        conGD.addChild(child);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_end_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.AT_END);
        Exp node = null;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(END);
        node = node();
        right_bracket();
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp always_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.ALWAYS);
        Exp node = null;
        left_bracket();
        jj_consume_token(ALWAYS);
        node = node();
        right_bracket();
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp sometime_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.SOMETIME);
        Exp node = null;
        left_bracket();
        jj_consume_token(SOMETIME);
        node = node();
        right_bracket();
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp within_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.WITHIN);
        Token token = null;
        Exp node = null;
        left_bracket();
        jj_consume_token(WITHIN);
        token = jj_consume_token(NUMBER);
        node = node();
        right_bracket();
        Exp n1 = new Exp(Connective.NUMBER);
        n1.setValue(Double.parseDouble(token.image));
        conGD.addChild(n1);
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_most_once_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.AT_MOST_ONCE);
        Exp node = null;
        left_bracket();
        jj_consume_token(AT_MOST_ONCE);
        node = node();
        right_bracket();
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp sometime_after_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.SOMETIME_AFTER);
        Exp gd1 = null;
        Exp gd2 = null;
        left_bracket();
        jj_consume_token(SOMETIME_AFTER);
        gd1 = node();
        gd2 = node();
        right_bracket();
        conGD.addChild(gd1);
        conGD.addChild(gd2);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp sometime_before_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.SOMETIME_BEFORE);
        Exp gd1 = null;
        Exp gd2 = null;
        left_bracket();
        jj_consume_token(SOMETIME_BEFORE);
        gd1 = node();
        gd2 = node();
        right_bracket();
        conGD.addChild(gd1);
        conGD.addChild(gd2);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp always_within_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.ALWAYS_WITHIN);
        Token token = null;
        Exp gd1 = null;
        Exp gd2 = null;
        left_bracket();
        jj_consume_token(ALWAYS_WITHIN);
        token = jj_consume_token(NUMBER);
        gd1 = node();
        gd2 = node();
        right_bracket();
        Exp n1 = new Exp(Connective.NUMBER);
        n1.setValue(Double.parseDouble(token.image));
        conGD.addChild(n1);
        conGD.addChild(gd1);
        conGD.addChild(gd2);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp hold_during_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.HOLD_DURING);
        Token token1 = null;
        Token token2 = null;
        Exp node = null;
        left_bracket();
        jj_consume_token(HOLD_DURING);
        token1 = jj_consume_token(NUMBER);
        token2 = jj_consume_token(NUMBER);
        node = node();
        right_bracket();
        Exp n1 = new Exp(Connective.NUMBER);
        n1.setValue(Double.parseDouble(token1.image));
        conGD.addChild(n1);
        Exp n2 = new Exp(Connective.NUMBER);
        n2.setValue(Double.parseDouble(token2.image));
        conGD.addChild(n2);
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp hold_after_con_gd() throws ParseException
    {
        Exp conGD = new Exp(Connective.HOLD_AFTER);
        Token token = null;
        Exp node = null;
        left_bracket();
        jj_consume_token(HOLD_AFTER);
        token = jj_consume_token(NUMBER);
        node = node();
        right_bracket();
        Exp n1 = new Exp(Connective.NUMBER);
        n1.setValue(Double.parseDouble(token.image));
        conGD.addChild(n1);
        conGD.addChild(node);
        {
            if ("" != null)
                return conGD;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp node() throws ParseException
    {
        Exp node = null;
        if (jj_2_29(2))
        {
            node = atomic_formula(Lexer.TERM);
        }
        else if (jj_2_30(2))
        {
            node = and_gd();
        }
        else if (jj_2_31(2)
                && (this.isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS)))
        {
            node = or_gd();
        }
        else if (jj_2_32(2)
                && (this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS)))
        {
            node = not_gd();
        }
        else if (jj_2_33(2) && (this
                .isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                && this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS)))
        {
            node = imply_gd();
        }
        else if (jj_2_34(2)
                && (this.isRequirement(RequireKey.EXISTENTIAL_PRECONDITIONS)))
        {
            node = exists_gd();
        }
        else if (jj_2_35(2)
                && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS)))
        {
            node = forall_gd();
        }
        else if (jj_2_36(3) && (this.isRequirement(RequireKey.EQUALITY)))
        {
            node = equal_gd();
        }
        else if (jj_2_37(2) && (this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS)))
        {
            node = f_comp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp equal_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_38(2))
        {
            node = not_equal_atomic_formula();
        }
        else if (jj_2_39(2))
        {
            node = equal_atomic_formula();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp not_equal_atomic_formula() throws ParseException
    {
        Exp node = new Exp(Connective.NOT);
        Exp c = null;
        left_bracket();
        jj_consume_token(NOT);
        c = equal_gd();
        right_bracket();
        node.addChild(c);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp equal_atomic_formula() throws ParseException
    {
        Exp node = new Exp(Connective.EQUAL_ATOM);
        List<Symbol> atom = new ArrayList<Symbol>();
        Symbol t1 = null;
        Symbol t2 = null;
        left_bracket();
        jj_consume_token(EQUAL);
        t1 = term();
        t2 = term();
        right_bracket();
        atom.add(t1);
        atom.add(t2);
        node.setAtom(atom);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_gd() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp s = null;
        left_bracket();
        jj_consume_token(AND);
        label_10: while (true)
        {
            if (jj_2_40(2))
            {
                ;
            }
            else
            {
                break label_10;
            }
            s = node();
            node.addChild(s);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp or_gd() throws ParseException
    {
        Exp node = new Exp(Connective.OR);
        Exp s = null;
        left_bracket();
        jj_consume_token(OR);
        label_11: while (true)
        {
            if (jj_2_41(2))
            {
                ;
            }
            else
            {
                break label_11;
            }
            s = node();
            node.addChild(s);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp not_gd() throws ParseException
    {
        Exp node = new Exp(Connective.NOT);
        Exp s = null;
        left_bracket();
        jj_consume_token(NOT);
        s = node();
        right_bracket();
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp imply_gd() throws ParseException
    {
        Exp node = new Exp(Connective.OR);
        Exp p = null;
        Exp q = null;
        left_bracket();
        jj_consume_token(IMPLY);
        p = node();
        q = node();
        right_bracket();
        Exp not_p = new Exp(Connective.NOT);
        not_p.addChild(p);
        node.addChild(not_p);
        node.addChild(q);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp exists_gd() throws ParseException
    {
        Exp node = new Exp(Connective.EXISTS);
        List<TypedSymbol> typedList = null;
        Exp s = null;
        left_bracket();
        jj_consume_token(EXISTS);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        s = node();
        right_bracket();
        node.setVariables(typedList);
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_gd() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        List<TypedSymbol> typedList = null;
        Exp s = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        s = node();
        right_bracket();
        node.setVariables(typedList);
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp atomic_formula(int type) throws ParseException
    {
        Exp node = new Exp(Connective.ATOM);
        List<Symbol> atom = new ArrayList<Symbol>();
        Symbol t = null;
        jj_consume_token(LEFT_BRACKET);
        t = predicate();
        atom.add(t);
        if (type == Lexer.CONSTANT)
        {
            label_12: while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case AT:
                case START:
                case END:
                case OVER:
                case SYMBOL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    break label_12;
                }
                t = constant();
                atom.add(t);
            }
        }
        else if (type == Lexer.TERM)
        {
            label_13: while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
                {
                case AT:
                case START:
                case END:
                case OVER:
                case VARIABLE_SYMBOL:
                case SYMBOL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    break label_13;
                }
                t = term();
                atom.add(t);
            }
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.setAtom(atom);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol term() throws ParseException
    {
        Symbol t = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case AT:
        case START:
        case END:
        case OVER:
        case SYMBOL:
        {
            t = constant();
            break;
        }
        case VARIABLE_SYMBOL:
        {
            t = variable();
            break;
        }
        default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return t;
        }
        throw new Error("Missing return statement in function");
    }

    /*
     * Exp function_term() : { Exp node = new Exp(Connective.F_EXP);
     * List<Symbol> function = new ArrayList<Symbol>(); Symbol t = null; } {
     * <LEFT_BRACKET> t=functor() { function.add(t); } (t=constant() |
     * t=variable()) { function.add(t); })* right_bracket() { node.setAtom()
     * return node; } }
     */
    final public

            Exp literal(int type) throws ParseException
    {
        Exp node = null;
        if (jj_2_42(2))
        {
            node = atomic_formula(type);
        }
        else if (jj_2_43(2))
        {
            node = not_atomic_formula(type);
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp not_atomic_formula(int type) throws ParseException
    {
        Exp node = new Exp(Connective.NOT);
        Exp s = null;
        left_bracket();
        jj_consume_token(NOT);
        s = atomic_formula(type);
        right_bracket();
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_comp() throws ParseException
    {
        Exp node = null;
        node = binary_comp();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp binary_comp() throws ParseException
    {
        Exp node = null;
        if (jj_2_44(2))
        {
            node = greater_comp();
        }
        else if (jj_2_45(2))
        {
            node = less_comp();
        }
        else if (jj_2_46(2))
        {
            node = greater_equal_comp();
        }
        else if (jj_2_47(2))
        {
            node = less_equal_comp();
        }
        else if (jj_2_48(2))
        {
            node = equal_comp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp greater_comp() throws ParseException
    {
        Exp node = new Exp(Connective.GREATER);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(GREATER);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp greater_equal_comp() throws ParseException
    {
        Exp node = new Exp(Connective.GREATER_OR_EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(GEQUAL);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp less_equal_comp() throws ParseException
    {
        Exp node = new Exp(Connective.LESS_OR_EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(LEQUAL);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp less_comp() throws ParseException
    {
        Exp node = new Exp(Connective.LESS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(LESS);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp equal_comp() throws ParseException
    {
        Exp node = new Exp(Connective.EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(EQUAL);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_exp() throws ParseException
    {
        Exp node = new Exp(Connective.F_EXP);
        Exp child = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case NUMBER:
        {
            child = number();
            break;
        }
        default:
            jj_la1[14] = jj_gen;
            if (jj_2_49(2))
            {
                child = op();
            }
            else if (jj_2_50(2))
            {
                child = f_head();
            }
            else
            {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp number() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(NUMBER);
        Exp node = new Exp(Connective.NUMBER);
        node.setValue(Double.parseDouble(t.image));
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp op() throws ParseException
    {
        Exp node = null;
        if (jj_2_51(2))
        {
            node = binary_operation();
        }
        else if (jj_2_52(2))
        {
            node = unary_op();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp binary_operation() throws ParseException
    {
        Exp node = null;
        if (jj_2_53(2))
        {
            node = add_op();
        }
        else if (jj_2_54(2))
        {
            node = substract_op();
        }
        else if (jj_2_55(2))
        {
            node = multiply_op();
        }
        else if (jj_2_56(2))
        {
            node = divide_op();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp add_op() throws ParseException
    {
        Exp node = new Exp(Connective.PLUS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(ADD);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp substract_op() throws ParseException
    {
        Exp node = new Exp(Connective.MINUS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SUB);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp multiply_op() throws ParseException
    {
        Exp node = new Exp(Connective.MUL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(MUL);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp divide_op() throws ParseException
    {
        Exp node = new Exp(Connective.DIV);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DIV);
        op1 = f_exp();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp unary_op() throws ParseException
    {
        Exp node = new Exp(Connective.UMINUS);
        Exp op1 = null;
        left_bracket();
        jj_consume_token(SUB);
        op1 = f_exp();
        right_bracket();
        node.addChild(op1);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_head() throws ParseException
    {
        Exp node = new Exp(Connective.FN_HEAD);
        List<Symbol> tokenList = new ArrayList<Symbol>();
        Symbol s = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case LEFT_BRACKET:
        {
            left_bracket();
            s = functor();
            tokenList.add(s);
            label_14: while (true)
            {
                if (jj_2_57(2))
                {
                    ;
                }
                else
                {
                    break label_14;
                }
                s = term();
                tokenList.add(s);
            }
            right_bracket();
            break;
        }
        case AT:
        case START:
        case END:
        case OVER:
        case TOTAL_COST:
        case SYMBOL:
        {
            s = functor();
            tokenList.add(s);
            break;
        }
        default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        node.setAtom(tokenList);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public void structure_def() throws ParseException
    {
//        Op op = null;
//        DerivedPredicate dp = null;
//        if (jj_2_58(2))
//        {
//            op = action_def();
//            this.domain.addOperator(op);
//        }
//        else if (jj_2_59(2)
//                && (this.isRequirement(RequireKey.DURATIVE_ACTIONS)))
//        {
//            op = durative_action_def();
//            this.domain.addOperator(op);
//        }
//        else if (jj_2_60(2)
//                && (this.isRequirement(RequireKey.DERIVED_PREDICATES)))
//        {
//            dp = derived_def();
//            this.domain.addDerivedPredicate(dp);
//        }
//        else
//        {
//            jj_consume_token(-1);
//            throw new ParseException();
//        }
    }

    final public DerivedPredicate derived_def() throws ParseException
    {
        NamedTypedList head = null;
        Exp body = null;
        try
        {
            jj_consume_token(LEFT_BRACKET);
            jj_consume_token(DERIVED);
            head = atomic_formula_skeleton();
            body = node();
            jj_consume_token(RIGHT_BRACKET);
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
        {
            if ("" != null)
                return new DerivedPredicate(head, body);
        }
        throw new Error("Missing return statement in function");
    }

    final public Op action_def() throws ParseException
    {
        Symbol name = null;
        List<TypedSymbol> parameters = null;
        Exp preconds = null;
        Exp effects = null;
        try
        {
            left_bracket();
            jj_consume_token(ACTION);
            name = action_name();
            jj_consume_token(PARAMETERS);
            left_bracket();
            parameters = typed_list(Lexer.VARIABLE);
            right_bracket();
            jj_consume_token(PRECONDITION);
            preconds = pre_gd();
            jj_consume_token(EFFECT);
            effects = effect();
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
        {
            if ("" != null)
                return new Op(name, parameters, preconds, effects);
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol action_name() throws ParseException
    {
        Token t = token;
        t = jj_consume_token(SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.ACTION, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp pre_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_61(3) && (this.isRequirement(RequireKey.PREFERENCES)))
        {
            node = pref_gd();
        }
        else if (jj_2_62(2))
        {
            node = and_pre_gd();
        }
        else if (jj_2_63(2)
                && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS)))
        {
            node = forall_pre_gd();
        }
        else if (jj_2_64(2))
        {
            node = empty_or();
        }
        else if (jj_2_65(2))
        {
            node = node();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp empty_or() throws ParseException
    {
        Token t = token;
        t = jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
        {
            if ("" != null)
                return new Exp(Connective.OR);
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_pre_gd() throws ParseException
    {
        Token t = token;
        Exp node = new Exp(Connective.AND);
        Exp s;
        t = left_bracket();
        jj_consume_token(AND);
        label_15: while (true)
        {
            if (jj_2_66(1))
            {
                ;
            }
            else
            {
                break label_15;
            }
            s = pre_gd();
            node.addChild(s);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_pre_gd() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        List<TypedSymbol> vars = null;
        Exp s = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        vars = typed_list(Lexer.VARIABLE);
        right_bracket();
        s = pre_gd();
        right_bracket();
        node.setVariables(vars);
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp pref_gd() throws ParseException
    {
        Symbol pref_name = null;
        Exp node = null;
        left_bracket();
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            pref_name = pref_name();
            break;
        }
        default:
            jj_la1[16] = jj_gen;
            ;
        }
        node = node();
        right_bracket();
        node.setPrefName(pref_name);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol pref_name() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.PREFERENCE, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_67(2))
        {
            node = and_c_effect();
        }
        else if (jj_2_68(2))
        {
            node = c_effect();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_c_effect() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp s = null;
        left_bracket();
        jj_consume_token(AND);
        label_16: while (true)
        {
            if (jj_2_69(2))
            {
                ;
            }
            else
            {
                break label_16;
            }
            s = c_effect();
            node.addChild(s);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp c_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_70(2) && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS)))
        {
            node = forall_effect();
        }
        else if (jj_2_71(2)
                && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS)))
        {
            node = when_con_effect();
        }
        else if (jj_2_72(2))
        {
            node = p_effect();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_effect() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        List<TypedSymbol> vars = null;
        Exp s = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        vars = typed_list(Lexer.VARIABLE);
        right_bracket();
        s = effect();
        right_bracket();
        node.setVariables(vars);
        node.addChild(s);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp when_con_effect() throws ParseException
    {
        Exp node = new Exp(Connective.WHEN);
        Exp condition = null;
        Exp effects = null;
        left_bracket();
        jj_consume_token(WHEN);
        condition = node();
        effects = cond_effect();
        right_bracket();
        node.addChild(condition);
        node.addChild(effects);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp cond_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_73(2))
        {
            node = and_p_effect();
        }
        else if (jj_2_74(2))
        {
            node = p_effect();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_p_effect() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp s = null;
        left_bracket();
        jj_consume_token(AND);
        label_17: while (true)
        {
            if (jj_2_75(2))
            {
                ;
            }
            else
            {
                break label_17;
            }
            s = p_effect();
            node.addChild(s);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp p_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_76(2) && (this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS)))
        {
            node = assign_op();
        }
        else if (jj_2_77(2) && (this.isRequirement(RequireKey.ACTION_COSTS)))
        {
            node = increase_total_cost();
        }
        else if (jj_2_78(2))
        {
            node = literal(Lexer.TERM);
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp increase_total_cost() throws ParseException
    {
        Exp node = new Exp(Connective.INCREASE);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(INCREASE);
        op1 = total_cost();
        op2 = numeric_term();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp total_cost() throws ParseException
    {
        Token t;
        jj_consume_token(LEFT_BRACKET);
        t = jj_consume_token(TOTAL_COST);
        jj_consume_token(RIGHT_BRACKET);
        Exp node = new Exp(Connective.FN_HEAD);
        List<Symbol> function = new ArrayList<Symbol>();
        function.add(new Symbol(Symbol.Kind.FUNCTOR, t));
        node.setAtom(function);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp numeric_term() throws ParseException
    {
        List<Symbol> tokenList = new ArrayList<Symbol>();
        Symbol s = null;
        Exp node = null;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case LEFT_BRACKET:
        {
            left_bracket();
            s = functor();
            tokenList.add(s);
            label_18: while (true)
            {
                if (jj_2_79(2))
                {
                    ;
                }
                else
                {
                    break label_18;
                }
                s = term();
                tokenList.add(s);
            }
            right_bracket();
            node = new Exp(Connective.FN_HEAD);
            node.setAtom(tokenList);
            {
                if ("" != null)
                    return node;
            }
            break;
        }
        case NUMBER:
        {
            node = number();
            {
                if ("" != null)
                    return node;
            }
            break;
        }
        default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp assign_op() throws ParseException
    {
        Exp node = null;
        if (jj_2_80(2))
        {
            node = assign();
        }
        else if (jj_2_81(2))
        {
            node = scale_up();
        }
        else if (jj_2_82(2))
        {
            node = scale_down();
        }
        else if (jj_2_83(2))
        {
            node = increase();
        }
        else if (jj_2_84(2))
        {
            node = decrease();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp assign() throws ParseException
    {
        Exp node = new Exp(Connective.ASSIGN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(ASSIGN);
        op1 = f_head();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp scale_up() throws ParseException
    {
        Exp node = new Exp(Connective.SCALE_UP);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SCALE_UP);
        op1 = f_head();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp scale_down() throws ParseException
    {
        Exp node = new Exp(Connective.SCALE_DOWN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SCALE_DOWN);
        op1 = f_head();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp increase() throws ParseException
    {
        Exp node = new Exp(Connective.INCREASE);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(INCREASE);
        op1 = f_head();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp decrease() throws ParseException
    {
        Exp node = new Exp(Connective.DECREASE);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DECREASE);
        op1 = f_head();
        op2 = f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Op durative_action_def() throws ParseException
    {
        Symbol name = null;
        List<TypedSymbol> parameters = null;
        Exp duration = null;
        Exp condition = null;
        Exp effect = null;
        try
        {
            left_bracket();
            jj_consume_token(DURATIVE_ACTION);
            name = da_symbol();
            jj_consume_token(PARAMETERS);
            left_bracket();
            parameters = typed_list(Lexer.VARIABLE);
            right_bracket();
            jj_consume_token(DURATION);
            duration = duration_constraint();
            jj_consume_token(CONDITION);
            condition = da_gd();
            jj_consume_token(EFFECT);
            effect = da_effect();
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
        {
            if ("" != null)
                return new Op(name, parameters, condition, effect, duration);
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol da_symbol() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.ACTION, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp duration_constraint() throws ParseException
    {
        Exp node = null;
        if (jj_2_85(2))
        {
            node = empty_or();
        }
        else if (jj_2_86(2)
                && (this.isRequirement(RequireKey.DURATION_INEQUALITIES)))
        {
            node = and_simple_duration_constraint();
        }
        else if (jj_2_87(2))
        {
            node = simple_duration_constraint();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_simple_duration_constraint() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp child = null;
        left_bracket();
        jj_consume_token(AND);
        label_19: while (true)
        {
            child = simple_duration_constraint();
            node.addChild(child);
            if (jj_2_88(2))
            {
                ;
            }
            else
            {
                break label_19;
            }
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp simple_duration_constraint() throws ParseException
    {
        Exp node = null;
        if (jj_2_89(2))
        {
            node = d_op();
        }
        else if (jj_2_90(2))
        {
            node = at_simple_duration_constraint();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_simple_duration_constraint() throws ParseException
    {
        Exp node = null;
        if (jj_2_91(3))
        {
            node = at_start_simple_duration_constraint();
        }
        else if (jj_2_92(3))
        {
            node = at_end_simple_duration_constraint();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_start_simple_duration_constraint() throws ParseException
    {
        Exp node = new Exp(Connective.AT_START);
        Exp child;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(START);
        child = simple_duration_constraint();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_end_simple_duration_constraint() throws ParseException
    {
        Exp node = new Exp(Connective.AT_END);
        Exp child;
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(AT);
        jj_consume_token(END);
        child = simple_duration_constraint();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp d_op() throws ParseException
    {
        Exp node = null;
        if (jj_2_93(2))
        {
            node = equal_d_op();
        }
        else if (jj_2_94(2)
                && (this.isRequirement(RequireKey.DURATION_INEQUALITIES)))
        {
            node = gequal_d_op();
        }
        else if (jj_2_95(2)
                && (this.isRequirement(RequireKey.DURATION_INEQUALITIES)))
        {
            node = lequal_d_op();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp equal_d_op() throws ParseException
    {
        Exp node = new Exp(Connective.EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(EQUAL);
        op1 = var_duration();
        op2 = d_value();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp gequal_d_op() throws ParseException
    {
        Exp node = new Exp(Connective.GREATER_OR_EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(GEQUAL);
        op1 = var_duration();
        op2 = d_value();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp lequal_d_op() throws ParseException
    {
        Exp node = new Exp(Connective.LESS_OR_EQUAL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(LEQUAL);
        op1 = var_duration();
        op2 = d_value();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp var_duration() throws ParseException
    {
        Exp node = new Exp(Connective.TIME_VAR);
        Token t = null;
        t = jj_consume_token(VAR_DURATION);
        node.setVariable(new Symbol(Symbol.Kind.DURATION_VARIABLE, t));
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp d_value() throws ParseException
    {
        Exp node = null;
        if (jj_2_96(2))
        {
            node = number();
        }
        else if (jj_2_97(2) && (this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS)))
        {
            node = f_exp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_98(2))
        {
            node = pref_timed_gd();
        }
        else if (jj_2_99(2))
        {
            node = and_da_gd();
        }
        else if (jj_2_100(2)
                && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS)))
        {
            node = forall_da_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_da_gd() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        Exp child = null;
        List<TypedSymbol> typedList = null;
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(FORALL);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        child = da_gd();
        right_bracket();
        node.setVariables(typedList);
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_da_gd() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp child = null;
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(AND);
        label_20: while (true)
        {
            if (jj_2_101(2))
            {
                ;
            }
            else
            {
                break label_20;
            }
            child = da_gd();
            node.addChild(child);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp pref_timed_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_102(2))
        {
            node = timed_gd();
        }
        else if (jj_2_103(2) && (this.isRequirement(RequireKey.PREFERENCES)))
        {
            node = named_pref_timed_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp named_pref_timed_gd() throws ParseException
    {
        Symbol pref_name = null;
        Exp node = null;
        left_bracket();
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            pref_name = pref_name();
            break;
        }
        default:
            jj_la1[18] = jj_gen;
            ;
        }
        node = timed_gd();
        right_bracket();
        node.setPrefName(pref_name);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp timed_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_104(2))
        {
            node = at_timed_gd();
        }
        else if (jj_2_105(2))
        {
            node = over_timed_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp over_timed_gd() throws ParseException
    {
        Exp node = new Exp(Connective.OVER_ALL);
        Exp child = null;
        left_bracket();
        jj_consume_token(OVER);
        jj_consume_token(ALL);
        child = node();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_timed_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_106(3))
        {
            node = at_start_timed_gd();
        }
        else if (jj_2_107(2))
        {
            node = at_end_timed_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_start_timed_gd() throws ParseException
    {
        Exp node = new Exp(Connective.AT_START);
        Exp child = null;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(START);
        child = node();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_end_timed_gd() throws ParseException
    {
        Exp node = new Exp(Connective.AT_END);
        Exp child = null;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(END);
        child = node();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_108(2))
        {
            node = and_da_effect();
        }
        else if (jj_2_109(2))
        {
            node = timed_effect();
        }
        else if (jj_2_110(2)
                && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS)))
        {
            node = forall_da_effect();
        }
        else if (jj_2_111(2)
                && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS)))
        {
            node = when_da_effect();
        }
        else if (jj_2_112(2) && (this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS)))
        {
            node = da_assign_op();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_assign_op() throws ParseException
    {
        Exp node = null;
        if (jj_2_113(2))
        {
            node = da_assign();
        }
        else if (jj_2_114(2))
        {
            node = da_scale_up();
        }
        else if (jj_2_115(2))
        {
            node = da_scale_down();
        }
        else if (jj_2_116(2))
        {
            node = da_increase();
        }
        else if (jj_2_117(2))
        {
            node = da_decrease();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_assign() throws ParseException
    {
        Exp node = new Exp(Connective.ASSIGN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(ASSIGN);
        if (jj_2_118(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_119(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_scale_up() throws ParseException
    {
        Exp node = new Exp(Connective.SCALE_UP);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SCALE_UP);
        if (jj_2_120(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_121(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_scale_down() throws ParseException
    {
        Exp node = new Exp(Connective.SCALE_DOWN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SCALE_DOWN);
        if (jj_2_122(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_123(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_increase() throws ParseException
    {
        Exp node = new Exp(Connective.INCREASE);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(INCREASE);
        if (jj_2_124(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_125(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_decrease() throws ParseException
    {
        Exp node = new Exp(Connective.DECREASE);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DECREASE);
        if (jj_2_126(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_127(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp when_da_effect() throws ParseException
    {
        Exp node = new Exp(Connective.WHEN);
        Exp condition = null;
        Exp effect = null;
        left_bracket();
        jj_consume_token(WHEN);
        condition = da_gd();
        effect = da_effect();
        right_bracket();
        node.addChild(condition);
        node.addChild(effect);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_da_effect() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        List<TypedSymbol> typedList = null;
        Exp child = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        child = da_effect();
        right_bracket();
        node.setVariables(typedList);
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_da_effect() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp child = null;
        left_bracket();
        jj_consume_token(AND);
        label_21: while (true)
        {
            if (jj_2_128(2))
            {
                ;
            }
            else
            {
                break label_21;
            }
            child = da_effect();
            node.addChild(child);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp timed_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_129(2))
        {
            node = at_a_effect();
        }
        else if (jj_2_130(3)
                && (this.isRequirement(RequireKey.CONTINOUS_EFFECTS)))
        {
            node = assign_op_t();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_f_assign_da() throws ParseException
    {
        Exp node = null;
        if (jj_2_131(3))
        {
            node = at_start_f_assign_da();
        }
        else if (jj_2_132(3))
        {
            node = at_end_f_assign_da();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_start_f_assign_da() throws ParseException
    {
        Exp node = new Exp(Connective.AT_START);
        Exp child;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(START);
        child = f_assign_da();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_end_f_assign_da() throws ParseException
    {
        Exp node = new Exp(Connective.AT_END);
        Exp child;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(END);
        child = f_assign_da();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_a_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_133(4))
        {
            node = at_start_a_effect();
        }
        else if (jj_2_134(4))
        {
            node = at_end_a_effect();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp a_effect() throws ParseException
    {
        Exp node = null;
        if (jj_2_135(2))
        {
            node = f_assign_da();
        }
        else if (jj_2_136(2))
        {
            node = literal(Lexer.TERM);
        }
        else if (jj_2_137(2))
        {
            node = when_con_effect();
        }
        else if (jj_2_138(2))
        {
            node = forall_effect();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_start_a_effect() throws ParseException
    {
        Exp node = new Exp(Connective.AT_START);
        Exp child = null;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(START);
        child = a_effect();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp at_end_a_effect() throws ParseException
    {
        Exp node = new Exp(Connective.AT_END);
        Exp child = null;
        left_bracket();
        jj_consume_token(AT);
        jj_consume_token(END);
        child = a_effect();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp assign_op_t() throws ParseException
    {
        Exp node = null;
        if (jj_2_139(2))
        {
            node = increase_assign_op_t();
        }
        else if (jj_2_140(2))
        {
            node = decrease_assign_op_t();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp increase_assign_op_t() throws ParseException
    {
        Exp node = new Exp(Connective.ASSIGN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(INCREASE);
        op1 = f_head();
        op2 = f_exp_t();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp decrease_assign_op_t() throws ParseException
    {
        Exp node = new Exp(Connective.ASSIGN);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DECREASE);
        op1 = f_head();
        op2 = f_exp_t();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_exp_t() throws ParseException
    {
        Exp node = new Exp(Connective.F_EXP_T);
        Symbol continuous_variable_name = null;
        Exp child = null;
        if (jj_2_141(2))
        {
            left_bracket();
            jj_consume_token(MUL);
            continuous_variable_name = continuous_variable();
            child = f_exp();
            right_bracket();
        }
        else if (jj_2_142(2))
        {
            left_bracket();
            jj_consume_token(MUL);
            child = f_exp();
            continuous_variable_name = continuous_variable();
            right_bracket();
        }
        else if (jj_2_143(2))
        {
            continuous_variable_name = continuous_variable();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        node.setVariable(continuous_variable_name);
        if (child != null)
            node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol continuous_variable() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(CONTINUOUS_VARIABLE);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.CONTINUOUS_VARIABLE, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_assign_da() throws ParseException
    {
        Exp node = null;
        if (jj_2_144(2))
        {
            node = da_assign();
        }
        else if (jj_2_145(2))
        {
            node = da_scale_up();
        }
        else if (jj_2_146(2))
        {
            node = da_scale_down();
        }
        else if (jj_2_147(2))
        {
            node = da_increase();
        }
        else if (jj_2_148(2))
        {
            node = da_decrease();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp f_exp_da() throws ParseException
    {
        Exp node = null;
        if (jj_2_149(2))
        {
            node = da_op();
        }
        else if (jj_2_150(2)
                && (this.isRequirement(RequireKey.DURATION_INEQUALITIES)))
        {
            node = var_duration();
        }
        else if (jj_2_151(2))
        {
            node = f_exp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_op() throws ParseException
    {
        Exp node = null;
        if (jj_2_152(2))
        {
            node = da_add_op();
        }
        else if (jj_2_153(2))
        {
            node = da_substract_op();
        }
        else if (jj_2_154(2))
        {
            node = da_multiply_op();
        }
        else if (jj_2_155(2))
        {
            node = da_divide_op();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_add_op() throws ParseException
    {
        Exp node = new Exp(Connective.PLUS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(ADD);
        if (jj_2_156(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_157(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_substract_op() throws ParseException
    {
        Exp node = new Exp(Connective.MINUS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SUB);
        if (jj_2_160(3))
        {
            op1 = f_head();
            if (jj_2_158(1))
            {
                op2 = f_exp_da();
            }
            else
            {
                ;
            }
        }
        else if (jj_2_161(3))
        {
            if (jj_2_159(2))
            {
                op2 = f_exp_da();
            }
            else
            {
                ;
            }
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        if (op2 != null)
            node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_multiply_op() throws ParseException
    {
        Exp node = new Exp(Connective.MUL);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(MUL);
        if (jj_2_162(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_163(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp da_divide_op() throws ParseException
    {
        Exp node = new Exp(Connective.DIV);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DIV);
        if (jj_2_164(3))
        {
            op1 = f_head();
            op2 = f_exp_da();
        }
        else if (jj_2_165(3))
        {
            op2 = f_exp_da();
            op1 = f_head();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public void problem() throws ParseException
    {
        Exp node = null;
        Symbol name = null;
        try
        {
            left_bracket();
            jj_consume_token(DEFINE);
            left_bracket();
            jj_consume_token(PROBLEM);
            name = problem_name();
            this.problem = new Problem(name);
            right_bracket();
            left_bracket();
            jj_consume_token(P_DOMAIN);
            domain_problem_name();
            right_bracket();
            if (jj_2_166(2))
            {
                require_def(Lexer.PROBLEM);
            }
            else
            {
                ;
            }
            if (jj_2_167(2))
            {
                object_declaration();
            }
            else
            {
                ;
            }
            init();
            goal();
            if (jj_2_168(2) && (this.isRequirement(RequireKey.CONSTRAINTS)))
            {
                constraints(Lexer.PROBLEM);
            }
            else
            {
                ;
            }
            if (jj_2_169(2))
            {
                metric_spec();
            }
            else
            {
                ;
            }
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public Symbol problem_name() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.PROBLEM, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public void domain_problem_name() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(SYMBOL);
        this.problem.setDomain(new Symbol(Symbol.Kind.DOMAIN, t));
    }

    final public Symbol domain_name() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(SYMBOL);
        {
            if ("" != null)
                return new Symbol(Symbol.Kind.DOMAIN, t);
        }
        throw new Error("Missing return statement in function");
    }

    final public void object_declaration() throws ParseException
    {
        List<TypedSymbol> typedList = null;
        try
        {
            left_bracket();
            jj_consume_token(OBJECTS);
            typedList = typed_list(Lexer.CONSTANT);
            right_bracket();
            for (TypedSymbol object : typedList)
            {
                this.problem.addObject(object);
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public void init() throws ParseException
    {
        Exp node = null;
        try
        {
            left_bracket();
            jj_consume_token(INIT);
            label_22: while (true)
            {
                if (jj_2_170(2))
                {
                    ;
                }
                else
                {
                    break label_22;
                }
                node = init_el();
                this.problem.addInitialFact(node);
            }
            right_bracket();
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public Exp init_el() throws ParseException
    {
        Exp node = null;
        if (jj_2_171(3)
                && (this.isRequirement(RequireKey.TIMED_INITIAL_LITERALS)))
        {
            node = timed_literal();
        }
        else if (jj_2_172(2))
        {
            node = literal(Lexer.CONSTANT);
        }
        else if (jj_2_173(2) && (this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                || this.isRequirement(RequireKey.ACTION_COSTS)))
        {
            node = equal_init_el();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp equal_init_el() throws ParseException
    {
        Exp node = new Exp(Connective.FN_ATOM);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(EQUAL);
        op1 = constant_f_head();
        op2 = number();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp timed_literal() throws ParseException
    {
        Exp node = new Exp(Connective.DURATION_ATOM);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(AT);
        op1 = number();
        op2 = literal(Lexer.CONSTANT);
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public void goal() throws ParseException
    {
        Exp node = null;
        Boolean goal_utilities = false;
        if (this.isRequirement(RequireKey.GOAL_UTILITIES)
                && !this.isRequirement(RequireKey.PREFERENCES))
        {
            this.getRequirements().add(RequireKey.PREFERENCES);
            goal_utilities = true;
        }
        try
        {
            left_bracket();
            jj_consume_token(GOAL);
            node = pre_gd();
            right_bracket();
            this.problem.setGoal(node);
            if (goal_utilities)
            {
                this.getRequirements().remove(RequireKey.PREFERENCES);
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public void constraints(int type) throws ParseException
    {
        Exp conGD = null;
        try
        {
            jj_consume_token(LEFT_BRACKET);
            jj_consume_token(CONSTRAINTS);
            conGD = pref_con_gd();
            right_bracket();
            if (type == Lexer.PARSER_DOMAIN)
            {
                this.domain.setConstraints(conGD);
            }
            else
            {
                this.problem.setConstraints(conGD);
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
    }

    final public Exp pref_con_gd() throws ParseException
    {
        Exp node = null;
        if (jj_2_174(2))
        {
            node = and_pref_con_gd();
        }
        else if (jj_2_175(2)
                && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS)))
        {
            node = forall_pref_con_gd();
        }
        else if (jj_2_176(2) && (this.isRequirement(RequireKey.PREFERENCES)))
        {
            node = named_pref_con_gd();
        }
        else if (jj_2_177(2))
        {
            node = con_gd();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp and_pref_con_gd() throws ParseException
    {
        Exp node = new Exp(Connective.AND);
        Exp child;
        left_bracket();
        jj_consume_token(AND);
        label_23: while (true)
        {
            if (jj_2_178(2))
            {
                ;
            }
            else
            {
                break label_23;
            }
            child = pref_con_gd();
            node.addChild(child);
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp named_pref_con_gd() throws ParseException
    {
        Exp node = null;
        Symbol pref_name = null;
        left_bracket();
        jj_consume_token(PREFERENCE);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case SYMBOL:
        {
            pref_name = pref_name();
            break;
        }
        default:
            jj_la1[19] = jj_gen;
            ;
        }
        node = con_gd();
        right_bracket();
        node.setPrefName(pref_name);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp forall_pref_con_gd() throws ParseException
    {
        Exp node = new Exp(Connective.FORALL);
        List<TypedSymbol> typedList = null;
        Exp child = null;
        left_bracket();
        jj_consume_token(FORALL);
        left_bracket();
        typedList = typed_list(Lexer.VARIABLE);
        right_bracket();
        child = pref_con_gd();
        right_bracket();
        node.setVariables(typedList);
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public void metric_spec() throws ParseException
    {
        Exp node = null;
        try
        {
            if (jj_2_179(3))
            {
                node = maximize();
            }
            else if (jj_2_180(3))
            {
                node = minimize();
            }
            else
            {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        catch (Throwable e)
        {
            this.error(e, token.beginLine, token.beginColumn);
        }
        this.problem.setMetric(node);
    }

    final public Exp maximize() throws ParseException
    {
        Exp node = new Exp(Connective.MAXIMIZE);
        Exp child = null;
        left_bracket();
        jj_consume_token(METRIC);
        jj_consume_token(MAXIMIZE);
        child = metric_f_exp();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp minimize() throws ParseException
    {
        Exp node = new Exp(Connective.MINIMIZE);
        Exp child = null;
        left_bracket();
        jj_consume_token(METRIC);
        jj_consume_token(MINIMIZE);
        child = metric_f_exp();
        right_bracket();
        node.addChild(child);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp metric_f_exp() throws ParseException
    {
        Exp node = null;
        if (jj_2_181(2))
        {
            node = op_metric_f_exp();
        }
        else if (jj_2_182(2))
        {
            node = number();
        }
        else if (jj_2_183(2))
        {
            node = constant_f_head();
        }
        else if (jj_2_184(2))
        {
            node = total_time();
        }
        else if (jj_2_185(2))
        {
            node = violated_pref_exp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp violated_pref_exp() throws ParseException
    {
        Exp node = new Exp(Connective.IS_VIOLATED);
        Symbol pref_name = null;
        left_bracket();
        jj_consume_token(IS_VIOLATED);
        pref_name = pref_name();
        right_bracket();
        node.setPrefName(pref_name);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp constant_f_head() throws ParseException
    {
        Exp node = new Exp(Connective.FN_HEAD);
        List<Symbol> function = new ArrayList<Symbol>();
        Symbol functor = null;
        Symbol argument = null;
        left_bracket();
        functor = functor();
        function.add(functor);
        label_24: while (true)
        {
            if (jj_2_186(2))
            {
                ;
            }
            else
            {
                break label_24;
            }
            argument = constant();
            function.add(argument);
        }
        right_bracket();
        node.setAtom(function);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp total_time() throws ParseException
    {
        Exp node = new Exp(Connective.FN_HEAD);
        Token t;
        if (jj_2_187(3))
        {
            left_bracket();
            t = jj_consume_token(TOTAL_TIME);
            right_bracket();
        }
        else if (jj_2_188(2))
        {
            t = jj_consume_token(TOTAL_TIME);
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        List<Symbol> atom = new ArrayList<Symbol>();
        atom.add(new Symbol(Symbol.Kind.FUNCTOR, t));
        node.setAtom(atom);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp op_metric_f_exp() throws ParseException
    {
        Exp node = null;
        if (jj_2_189(2))
        {
            node = add_op_metric_f_exp();
        }
        else if (jj_2_190(2))
        {
            node = substract_op_metric_f_exp();
        }
        else if (jj_2_191(2))
        {
            node = multi_op_metric_f_exp();
        }
        else if (jj_2_192(2))
        {
            node = div_op_metric_f_exp();
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp add_op_metric_f_exp() throws ParseException
    {
        Exp node = new Exp(Connective.PLUS);
        Exp op = null;
        left_bracket();
        jj_consume_token(ADD);
        op = metric_f_exp();
        node.addChild(op);
        label_25: while (true)
        {
            op = metric_f_exp();
            node.addChild(op);
            if (jj_2_193(2))
            {
                ;
            }
            else
            {
                break label_25;
            }
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp substract_op_metric_f_exp() throws ParseException
    {
        Exp node = new Exp(Connective.MINUS);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(SUB);
        op1 = metric_f_exp();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk)
        {
        case LEFT_BRACKET:
        case TOTAL_TIME:
        case NUMBER:
        {
            op2 = metric_f_exp();
            break;
        }
        default:
            jj_la1[20] = jj_gen;
            ;
        }
        right_bracket();
        node.addChild(op1);
        if (op2 != null)
            node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp div_op_metric_f_exp() throws ParseException
    {
        Exp node = new Exp(Connective.DIV);
        Exp op1 = null;
        Exp op2 = null;
        left_bracket();
        jj_consume_token(DIV);
        op1 = metric_f_exp();
        op2 = metric_f_exp();
        right_bracket();
        node.addChild(op1);
        node.addChild(op2);
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    final public Exp multi_op_metric_f_exp() throws ParseException
    {
        Exp node = new Exp(Connective.MUL);
        Exp op = null;
        left_bracket();
        jj_consume_token(MUL);
        op = metric_f_exp();
        node.addChild(op);
        label_26: while (true)
        {
            op = metric_f_exp();
            node.addChild(op);
            if (jj_2_194(2))
            {
                ;
            }
            else
            {
                break label_26;
            }
        }
        right_bracket();
        {
            if ("" != null)
                return node;
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_1();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_2();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_3();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_4();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_5();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_6();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_7();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_8();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_9();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_10();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_11();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_12();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_13();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_14();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_15();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_16();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_17();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_18();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_19();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_20();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_21();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_22();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_23();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_24();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_25();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_26();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_27();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_28();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_29();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_30();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_31();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_32();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_33();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_34();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(33, xla);
        }
    }

    private boolean jj_2_35(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_35();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(34, xla);
        }
    }

    private boolean jj_2_36(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_36();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(35, xla);
        }
    }

    private boolean jj_2_37(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_37();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(36, xla);
        }
    }

    private boolean jj_2_38(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_38();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(37, xla);
        }
    }

    private boolean jj_2_39(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_39();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(38, xla);
        }
    }

    private boolean jj_2_40(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_40();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(39, xla);
        }
    }

    private boolean jj_2_41(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_41();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(40, xla);
        }
    }

    private boolean jj_2_42(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_42();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(41, xla);
        }
    }

    private boolean jj_2_43(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_43();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(42, xla);
        }
    }

    private boolean jj_2_44(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_44();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(43, xla);
        }
    }

    private boolean jj_2_45(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_45();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(44, xla);
        }
    }

    private boolean jj_2_46(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_46();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(45, xla);
        }
    }

    private boolean jj_2_47(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_47();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(46, xla);
        }
    }

    private boolean jj_2_48(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_48();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(47, xla);
        }
    }

    private boolean jj_2_49(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_49();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(48, xla);
        }
    }

    private boolean jj_2_50(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_50();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(49, xla);
        }
    }

    private boolean jj_2_51(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_51();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(50, xla);
        }
    }

    private boolean jj_2_52(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_52();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(51, xla);
        }
    }

    private boolean jj_2_53(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_53();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(52, xla);
        }
    }

    private boolean jj_2_54(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_54();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(53, xla);
        }
    }

    private boolean jj_2_55(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_55();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(54, xla);
        }
    }

    private boolean jj_2_56(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_56();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(55, xla);
        }
    }

    private boolean jj_2_57(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_57();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(56, xla);
        }
    }

    private boolean jj_2_58(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_58();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(57, xla);
        }
    }

    private boolean jj_2_59(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_59();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(58, xla);
        }
    }

    private boolean jj_2_60(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_60();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(59, xla);
        }
    }

    private boolean jj_2_61(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_61();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(60, xla);
        }
    }

    private boolean jj_2_62(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_62();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(61, xla);
        }
    }

    private boolean jj_2_63(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_63();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(62, xla);
        }
    }

    private boolean jj_2_64(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_64();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(63, xla);
        }
    }

    private boolean jj_2_65(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_65();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(64, xla);
        }
    }

    private boolean jj_2_66(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_66();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(65, xla);
        }
    }

    private boolean jj_2_67(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_67();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(66, xla);
        }
    }

    private boolean jj_2_68(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_68();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(67, xla);
        }
    }

    private boolean jj_2_69(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_69();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(68, xla);
        }
    }

    private boolean jj_2_70(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_70();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(69, xla);
        }
    }

    private boolean jj_2_71(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_71();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(70, xla);
        }
    }

    private boolean jj_2_72(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_72();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(71, xla);
        }
    }

    private boolean jj_2_73(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_73();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(72, xla);
        }
    }

    private boolean jj_2_74(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_74();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(73, xla);
        }
    }

    private boolean jj_2_75(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_75();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(74, xla);
        }
    }

    private boolean jj_2_76(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_76();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(75, xla);
        }
    }

    private boolean jj_2_77(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_77();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(76, xla);
        }
    }

    private boolean jj_2_78(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_78();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(77, xla);
        }
    }

    private boolean jj_2_79(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_79();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(78, xla);
        }
    }

    private boolean jj_2_80(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_80();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(79, xla);
        }
    }

    private boolean jj_2_81(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_81();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(80, xla);
        }
    }

    private boolean jj_2_82(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_82();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(81, xla);
        }
    }

    private boolean jj_2_83(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_83();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(82, xla);
        }
    }

    private boolean jj_2_84(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_84();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(83, xla);
        }
    }

    private boolean jj_2_85(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_85();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(84, xla);
        }
    }

    private boolean jj_2_86(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_86();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(85, xla);
        }
    }

    private boolean jj_2_87(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_87();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(86, xla);
        }
    }

    private boolean jj_2_88(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_88();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(87, xla);
        }
    }

    private boolean jj_2_89(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_89();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(88, xla);
        }
    }

    private boolean jj_2_90(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_90();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(89, xla);
        }
    }

    private boolean jj_2_91(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_91();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(90, xla);
        }
    }

    private boolean jj_2_92(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_92();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(91, xla);
        }
    }

    private boolean jj_2_93(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_93();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(92, xla);
        }
    }

    private boolean jj_2_94(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_94();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(93, xla);
        }
    }

    private boolean jj_2_95(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_95();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(94, xla);
        }
    }

    private boolean jj_2_96(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_96();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(95, xla);
        }
    }

    private boolean jj_2_97(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_97();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(96, xla);
        }
    }

    private boolean jj_2_98(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_98();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(97, xla);
        }
    }

    private boolean jj_2_99(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_99();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(98, xla);
        }
    }

    private boolean jj_2_100(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_100();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(99, xla);
        }
    }

    private boolean jj_2_101(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_101();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(100, xla);
        }
    }

    private boolean jj_2_102(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_102();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(101, xla);
        }
    }

    private boolean jj_2_103(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_103();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(102, xla);
        }
    }

    private boolean jj_2_104(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_104();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(103, xla);
        }
    }

    private boolean jj_2_105(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_105();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(104, xla);
        }
    }

    private boolean jj_2_106(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_106();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(105, xla);
        }
    }

    private boolean jj_2_107(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_107();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(106, xla);
        }
    }

    private boolean jj_2_108(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_108();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(107, xla);
        }
    }

    private boolean jj_2_109(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_109();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(108, xla);
        }
    }

    private boolean jj_2_110(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_110();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(109, xla);
        }
    }

    private boolean jj_2_111(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_111();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(110, xla);
        }
    }

    private boolean jj_2_112(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_112();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(111, xla);
        }
    }

    private boolean jj_2_113(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_113();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(112, xla);
        }
    }

    private boolean jj_2_114(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_114();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(113, xla);
        }
    }

    private boolean jj_2_115(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_115();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(114, xla);
        }
    }

    private boolean jj_2_116(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_116();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(115, xla);
        }
    }

    private boolean jj_2_117(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_117();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(116, xla);
        }
    }

    private boolean jj_2_118(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_118();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(117, xla);
        }
    }

    private boolean jj_2_119(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_119();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(118, xla);
        }
    }

    private boolean jj_2_120(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_120();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(119, xla);
        }
    }

    private boolean jj_2_121(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_121();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(120, xla);
        }
    }

    private boolean jj_2_122(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_122();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(121, xla);
        }
    }

    private boolean jj_2_123(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_123();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(122, xla);
        }
    }

    private boolean jj_2_124(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_124();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(123, xla);
        }
    }

    private boolean jj_2_125(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_125();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(124, xla);
        }
    }

    private boolean jj_2_126(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_126();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(125, xla);
        }
    }

    private boolean jj_2_127(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_127();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(126, xla);
        }
    }

    private boolean jj_2_128(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_128();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(127, xla);
        }
    }

    private boolean jj_2_129(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_129();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(128, xla);
        }
    }

    private boolean jj_2_130(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_130();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(129, xla);
        }
    }

    private boolean jj_2_131(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_131();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(130, xla);
        }
    }

    private boolean jj_2_132(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_132();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(131, xla);
        }
    }

    private boolean jj_2_133(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_133();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(132, xla);
        }
    }

    private boolean jj_2_134(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_134();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(133, xla);
        }
    }

    private boolean jj_2_135(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_135();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(134, xla);
        }
    }

    private boolean jj_2_136(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_136();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(135, xla);
        }
    }

    private boolean jj_2_137(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_137();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(136, xla);
        }
    }

    private boolean jj_2_138(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_138();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(137, xla);
        }
    }

    private boolean jj_2_139(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_139();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(138, xla);
        }
    }

    private boolean jj_2_140(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_140();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(139, xla);
        }
    }

    private boolean jj_2_141(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_141();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(140, xla);
        }
    }

    private boolean jj_2_142(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_142();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(141, xla);
        }
    }

    private boolean jj_2_143(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_143();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(142, xla);
        }
    }

    private boolean jj_2_144(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_144();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(143, xla);
        }
    }

    private boolean jj_2_145(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_145();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(144, xla);
        }
    }

    private boolean jj_2_146(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_146();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(145, xla);
        }
    }

    private boolean jj_2_147(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_147();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(146, xla);
        }
    }

    private boolean jj_2_148(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_148();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(147, xla);
        }
    }

    private boolean jj_2_149(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_149();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(148, xla);
        }
    }

    private boolean jj_2_150(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_150();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(149, xla);
        }
    }

    private boolean jj_2_151(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_151();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(150, xla);
        }
    }

    private boolean jj_2_152(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_152();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(151, xla);
        }
    }

    private boolean jj_2_153(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_153();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(152, xla);
        }
    }

    private boolean jj_2_154(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_154();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(153, xla);
        }
    }

    private boolean jj_2_155(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_155();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(154, xla);
        }
    }

    private boolean jj_2_156(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_156();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(155, xla);
        }
    }

    private boolean jj_2_157(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_157();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(156, xla);
        }
    }

    private boolean jj_2_158(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_158();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(157, xla);
        }
    }

    private boolean jj_2_159(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_159();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(158, xla);
        }
    }

    private boolean jj_2_160(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_160();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(159, xla);
        }
    }

    private boolean jj_2_161(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_161();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(160, xla);
        }
    }

    private boolean jj_2_162(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_162();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(161, xla);
        }
    }

    private boolean jj_2_163(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_163();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(162, xla);
        }
    }

    private boolean jj_2_164(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_164();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(163, xla);
        }
    }

    private boolean jj_2_165(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_165();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(164, xla);
        }
    }

    private boolean jj_2_166(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_166();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(165, xla);
        }
    }

    private boolean jj_2_167(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_167();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(166, xla);
        }
    }

    private boolean jj_2_168(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_168();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(167, xla);
        }
    }

    private boolean jj_2_169(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_169();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(168, xla);
        }
    }

    private boolean jj_2_170(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_170();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(169, xla);
        }
    }

    private boolean jj_2_171(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_171();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(170, xla);
        }
    }

    private boolean jj_2_172(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_172();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(171, xla);
        }
    }

    private boolean jj_2_173(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_173();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(172, xla);
        }
    }

    private boolean jj_2_174(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_174();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(173, xla);
        }
    }

    private boolean jj_2_175(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_175();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(174, xla);
        }
    }

    private boolean jj_2_176(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_176();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(175, xla);
        }
    }

    private boolean jj_2_177(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_177();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(176, xla);
        }
    }

    private boolean jj_2_178(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_178();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(177, xla);
        }
    }

    private boolean jj_2_179(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_179();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(178, xla);
        }
    }

    private boolean jj_2_180(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_180();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(179, xla);
        }
    }

    private boolean jj_2_181(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_181();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(180, xla);
        }
    }

    private boolean jj_2_182(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_182();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(181, xla);
        }
    }

    private boolean jj_2_183(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_183();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(182, xla);
        }
    }

    private boolean jj_2_184(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_184();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(183, xla);
        }
    }

    private boolean jj_2_185(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_185();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(184, xla);
        }
    }

    private boolean jj_2_186(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_186();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(185, xla);
        }
    }

    private boolean jj_2_187(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_187();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(186, xla);
        }
    }

    private boolean jj_2_188(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_188();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(187, xla);
        }
    }

    private boolean jj_2_189(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_189();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(188, xla);
        }
    }

    private boolean jj_2_190(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_190();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(189, xla);
        }
    }

    private boolean jj_2_191(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_191();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(190, xla);
        }
    }

    private boolean jj_2_192(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_192();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(191, xla);
        }
    }

    private boolean jj_2_193(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_193();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(192, xla);
        }
    }

    private boolean jj_2_194(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_194();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(193, xla);
        }
    }

    private boolean jj_3R_106()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EQUAL))
            return true;
        return false;
    }

    private boolean jj_3_95()
    {
        if (jj_3R_108())
            return true;
        return false;
    }

    private boolean jj_3R_175()
    {
        if (jj_3R_34())
            return true;
        return false;
    }

    private boolean jj_3R_67()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(LEQUAL))
            return true;
        return false;
    }

    private boolean jj_3_94()
    {
        if (jj_3R_107())
            return true;
        return false;
    }

    private boolean jj_3_11()
    {
        if (jj_3R_34())
            return true;
        return false;
    }

    private boolean jj_3_93()
    {
        if (jj_3R_106())
            return true;
        return false;
    }

    private boolean jj_3R_34()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(103))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(102))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(105))
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_174()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EITHER))
            return true;
        return false;
    }

    private boolean jj_3R_150()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(OBJECTS))
            return true;
        return false;
    }

    private boolean jj_3R_102()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_93())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_94())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_95())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_37()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_174())
        {
            jj_scanpos = xsp;
            if (jj_3R_175())
                return true;
        }
        return false;
    }

    private boolean jj_3R_66()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(GEQUAL))
            return true;
        return false;
    }

    private boolean jj_3_10()
    {
        if (jj_scan_token(SUB))
            return true;
        return false;
    }

    private boolean jj_3R_105()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(END))
            return true;
        return false;
    }

    private boolean jj_3_169()
    {
        if (jj_3R_151())
            return true;
        return false;
    }

    private boolean jj_3R_64()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(GREATER))
            return true;
        return false;
    }

    private boolean jj_3_168()
    {
        if (jj_3R_32())
            return true;
        return false;
    }

    private boolean jj_3R_104()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(START))
            return true;
        return false;
    }

    private boolean jj_3_167()
    {
        if (jj_3R_150())
            return true;
        return false;
    }

    private boolean jj_3_48()
    {
        if (jj_3R_68())
            return true;
        return false;
    }

    private boolean jj_3_166()
    {
        if (jj_3R_27())
            return true;
        return false;
    }

    private boolean jj_3_47()
    {
        if (jj_3R_67())
            return true;
        return false;
    }

    private boolean jj_3_46()
    {
        if (jj_3R_66())
            return true;
        return false;
    }

    private boolean jj_3_92()
    {
        if (jj_3R_105())
            return true;
        return false;
    }

    private boolean jj_3_45()
    {
        if (jj_3R_65())
            return true;
        return false;
    }

    private boolean jj_3_91()
    {
        if (jj_3R_104())
            return true;
        return false;
    }

    private boolean jj_3_9()
    {
        if (jj_scan_token(SUB))
            return true;
        return false;
    }

    private boolean jj_3_44()
    {
        if (jj_3R_64())
            return true;
        return false;
    }

    private boolean jj_3R_103()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_91())
        {
            jj_scanpos = xsp;
            if (jj_3_92())
                return true;
        }
        return false;
    }

    private boolean jj_3R_176()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_44())
        {
            jj_scanpos = xsp;
            if (jj_3_45())
            {
                jj_scanpos = xsp;
                if (jj_3_46())
                {
                    jj_scanpos = xsp;
                    if (jj_3_47())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_48())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_90()
    {
        if (jj_3R_103())
            return true;
        return false;
    }

    private boolean jj_3_89()
    {
        if (jj_3R_102())
            return true;
        return false;
    }

    private boolean jj_3R_59()
    {
        if (jj_3R_176())
            return true;
        return false;
    }

    private boolean jj_3R_101()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_89())
        {
            jj_scanpos = xsp;
            if (jj_3_90())
                return true;
        }
        return false;
    }

    private boolean jj_3_8()
    {
        if (jj_scan_token(SUB))
            return true;
        return false;
    }

    private boolean jj_3_158()
    {
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3_165()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_164()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3_88()
    {
        if (jj_3R_101())
            return true;
        return false;
    }

    private boolean jj_3R_149()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DIV))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_164())
        {
            jj_scanpos = xsp;
            if (jj_3_165())
                return true;
        }
        return false;
    }

    private boolean jj_3R_63()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(NOT))
            return true;
        return false;
    }

    private boolean jj_3R_100()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3_43()
    {
        if (jj_3R_63())
            return true;
        return false;
    }

    private boolean jj_3_42()
    {
        if (jj_3R_51())
            return true;
        return false;
    }

    private boolean jj_3_87()
    {
        if (jj_3R_101())
            return true;
        return false;
    }

    private boolean jj_3_86()
    {
        if (jj_3R_100())
            return true;
        return false;
    }

    private boolean jj_3_163()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_85()
    {
        if (jj_3R_84())
            return true;
        return false;
    }

    private boolean jj_3_162()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3_159()
    {
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_94()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_42())
        {
            jj_scanpos = xsp;
            if (jj_3_43())
                return true;
        }
        return false;
    }

    private boolean jj_3R_148()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(MUL))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_162())
        {
            jj_scanpos = xsp;
            if (jj_3_163())
                return true;
        }
        return false;
    }

    private boolean jj_3_160()
    {
        if (jj_3R_70())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_158())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_161()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_159())
            jj_scanpos = xsp;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3R_147()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SUB))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_160())
        {
            jj_scanpos = xsp;
            if (jj_3_161())
                return true;
        }
        return false;
    }

    private boolean jj_3R_180()
    {
        if (jj_3R_184())
            return true;
        return false;
    }

    private boolean jj_3R_179()
    {
        if (jj_3R_165())
            return true;
        return false;
    }

    private boolean jj_3R_28()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(TYPES))
            return true;
        return false;
    }

    private boolean jj_3_157()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_156()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_77()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_179())
        {
            jj_scanpos = xsp;
            if (jj_3R_180())
                return true;
        }
        return false;
    }

    private boolean jj_3R_79()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DURATIVE_ACTION))
            return true;
        return false;
    }

    private boolean jj_3R_146()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ADD))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_156())
        {
            jj_scanpos = xsp;
            if (jj_3_157())
                return true;
        }
        return false;
    }

    private boolean jj_3_155()
    {
        if (jj_3R_149())
            return true;
        return false;
    }

    private boolean jj_3_154()
    {
        if (jj_3R_148())
            return true;
        return false;
    }

    private boolean jj_3_153()
    {
        if (jj_3R_147())
            return true;
        return false;
    }

    private boolean jj_3_152()
    {
        if (jj_3R_146())
            return true;
        return false;
    }

    private boolean jj_3R_51()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_3R_172())
            return true;
        return false;
    }

    private boolean jj_3R_144()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_152())
        {
            jj_scanpos = xsp;
            if (jj_3_153())
            {
                jj_scanpos = xsp;
                if (jj_3_154())
                {
                    jj_scanpos = xsp;
                    if (jj_3_155())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_99()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DECREASE))
            return true;
        return false;
    }

    private boolean jj_3_151()
    {
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3_150()
    {
        if (jj_3R_145())
            return true;
        return false;
    }

    private boolean jj_3_149()
    {
        if (jj_3R_144())
            return true;
        return false;
    }

    private boolean jj_3R_131()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_149())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_150())
            {
                jj_scanpos = xsp;
                if (jj_3_151())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_57()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3_148()
    {
        if (jj_3R_130())
            return true;
        return false;
    }

    private boolean jj_3_147()
    {
        if (jj_3R_129())
            return true;
        return false;
    }

    private boolean jj_3_146()
    {
        if (jj_3R_128())
            return true;
        return false;
    }

    private boolean jj_3R_98()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(INCREASE))
            return true;
        return false;
    }

    private boolean jj_3_145()
    {
        if (jj_3R_127())
            return true;
        return false;
    }

    private boolean jj_3_144()
    {
        if (jj_3R_126())
            return true;
        return false;
    }

    private boolean jj_3R_139()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_144())
        {
            jj_scanpos = xsp;
            if (jj_3_145())
            {
                jj_scanpos = xsp;
                if (jj_3_146())
                {
                    jj_scanpos = xsp;
                    if (jj_3_147())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_148())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_56()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EXISTS))
            return true;
        return false;
    }

    private boolean jj_3R_97()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SCALE_DOWN))
            return true;
        return false;
    }

    private boolean jj_3R_143()
    {
        if (jj_scan_token(CONTINUOUS_VARIABLE))
            return true;
        return false;
    }

    private boolean jj_3_143()
    {
        if (jj_3R_143())
            return true;
        return false;
    }

    private boolean jj_3_142()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(MUL))
            return true;
        return false;
    }

    private boolean jj_3R_55()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(IMPLY))
            return true;
        return false;
    }

    private boolean jj_3_141()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(MUL))
            return true;
        return false;
    }

    private boolean jj_3R_96()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SCALE_UP))
            return true;
        return false;
    }

    private boolean jj_3_41()
    {
        if (jj_3R_62())
            return true;
        return false;
    }

    private boolean jj_3R_54()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(NOT))
            return true;
        return false;
    }

    private boolean jj_3_40()
    {
        if (jj_3R_62())
            return true;
        return false;
    }

    private boolean jj_3R_95()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ASSIGN))
            return true;
        return false;
    }

    private boolean jj_3_84()
    {
        if (jj_3R_99())
            return true;
        return false;
    }

    private boolean jj_3_83()
    {
        if (jj_3R_98())
            return true;
        return false;
    }

    private boolean jj_3R_141()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DECREASE))
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_82()
    {
        if (jj_3R_97())
            return true;
        return false;
    }

    private boolean jj_3R_53()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(OR))
            return true;
        return false;
    }

    private boolean jj_3_81()
    {
        if (jj_3R_96())
            return true;
        return false;
    }

    private boolean jj_3_80()
    {
        if (jj_3R_95())
            return true;
        return false;
    }

    private boolean jj_3R_92()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_80())
        {
            jj_scanpos = xsp;
            if (jj_3_81())
            {
                jj_scanpos = xsp;
                if (jj_3_82())
                {
                    jj_scanpos = xsp;
                    if (jj_3_83())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_84())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_52()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_140()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(INCREASE))
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_140()
    {
        if (jj_3R_141())
            return true;
        return false;
    }

    private boolean jj_3_139()
    {
        if (jj_3R_140())
            return true;
        return false;
    }

    private boolean jj_3_79()
    {
        if (jj_3R_77())
            return true;
        return false;
    }

    private boolean jj_3R_134()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_139())
        {
            jj_scanpos = xsp;
            if (jj_3_140())
                return true;
        }
        return false;
    }

    private boolean jj_3R_61()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EQUAL))
            return true;
        if (jj_3R_77())
            return true;
        return false;
    }

    private boolean jj_3R_138()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(END))
            return true;
        if (jj_3R_183())
            return true;
        return false;
    }

    private boolean jj_3R_60()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(NOT))
            return true;
        if (jj_3R_58())
            return true;
        return false;
    }

    private boolean jj_3R_137()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(START))
            return true;
        if (jj_3R_183())
            return true;
        return false;
    }

    private boolean jj_3R_93()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(INCREASE))
            return true;
        return false;
    }

    private boolean jj_3_39()
    {
        if (jj_3R_61())
            return true;
        return false;
    }

    private boolean jj_3_38()
    {
        if (jj_3R_60())
            return true;
        return false;
    }

    private boolean jj_3_138()
    {
        if (jj_3R_88())
            return true;
        return false;
    }

    private boolean jj_3R_58()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_38())
        {
            jj_scanpos = xsp;
            if (jj_3_39())
                return true;
        }
        return false;
    }

    private boolean jj_3_137()
    {
        if (jj_3R_89())
            return true;
        return false;
    }

    private boolean jj_3_136()
    {
        if (jj_3R_94())
            return true;
        return false;
    }

    private boolean jj_3_135()
    {
        if (jj_3R_139())
            return true;
        return false;
    }

    private boolean jj_3_78()
    {
        if (jj_3R_94())
            return true;
        return false;
    }

    private boolean jj_3_37()
    {
        if (jj_3R_59())
            return true;
        return false;
    }

    private boolean jj_3_36()
    {
        if (jj_3R_58())
            return true;
        return false;
    }

    private boolean jj_3_75()
    {
        if (jj_3R_90())
            return true;
        return false;
    }

    private boolean jj_3_76()
    {
        if (jj_3R_92())
            return true;
        return false;
    }

    private boolean jj_3R_183()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_135())
        {
            jj_scanpos = xsp;
            if (jj_3_136())
            {
                jj_scanpos = xsp;
                if (jj_3_137())
                {
                    jj_scanpos = xsp;
                    if (jj_3_138())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_35()
    {
        if (jj_3R_57())
            return true;
        return false;
    }

    private boolean jj_3_77()
    {
        if (jj_3R_93())
            return true;
        return false;
    }

    private boolean jj_3_34()
    {
        if (jj_3R_56())
            return true;
        return false;
    }

    private boolean jj_3_134()
    {
        if (jj_3R_138())
            return true;
        return false;
    }

    private boolean jj_3_33()
    {
        if (jj_3R_55())
            return true;
        return false;
    }

    private boolean jj_3_133()
    {
        if (jj_3R_137())
            return true;
        return false;
    }

    private boolean jj_3_32()
    {
        if (jj_3R_54())
            return true;
        return false;
    }

    private boolean jj_3R_90()
    {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                || this.isRequirement(RequireKey.OBJECT_FLUENTS);
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3_76())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.ACTION_COSTS);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_77())
            {
                jj_scanpos = xsp;
                if (jj_3_78())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3_31()
    {
        if (jj_3R_53())
            return true;
        return false;
    }

    private boolean jj_3_30()
    {
        if (jj_3R_52())
            return true;
        return false;
    }

    private boolean jj_3R_133()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_133())
        {
            jj_scanpos = xsp;
            if (jj_3_134())
                return true;
        }
        return false;
    }

    private boolean jj_3_29()
    {
        if (jj_3R_51())
            return true;
        return false;
    }

    private boolean jj_3R_91()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_62()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_29())
        {
            jj_scanpos = xsp;
            if (jj_3_30())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this
                        .isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_31())
                {
                    jj_scanpos = xsp;
                    jj_lookingAhead = true;
                    jj_semLA = this
                            .isRequirement(RequireKey.NEGATIVE_PRECONDITIONS);
                    jj_lookingAhead = false;
                    if (!jj_semLA || jj_3_32())
                    {
                        jj_scanpos = xsp;
                        jj_lookingAhead = true;
                        jj_semLA = this.isRequirement(
                                RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                && this.isRequirement(
                                        RequireKey.NEGATIVE_PRECONDITIONS);
                        jj_lookingAhead = false;
                        if (!jj_semLA || jj_3_33())
                        {
                            jj_scanpos = xsp;
                            jj_lookingAhead = true;
                            jj_semLA = this.isRequirement(
                                    RequireKey.EXISTENTIAL_PRECONDITIONS);
                            jj_lookingAhead = false;
                            if (!jj_semLA || jj_3_34())
                            {
                                jj_scanpos = xsp;
                                jj_lookingAhead = true;
                                jj_semLA = this.isRequirement(
                                        RequireKey.UNIVERSAL_PRECONDITIONS);
                                jj_lookingAhead = false;
                                if (!jj_semLA || jj_3_35())
                                {
                                    jj_scanpos = xsp;
                                    jj_lookingAhead = true;
                                    jj_semLA = this
                                            .isRequirement(RequireKey.EQUALITY);
                                    jj_lookingAhead = false;
                                    if (!jj_semLA || jj_3_36())
                                    {
                                        jj_scanpos = xsp;
                                        jj_lookingAhead = true;
                                        jj_semLA = this.isRequirement(
                                                RequireKey.FLUENTS)
                                                || this.isRequirement(
                                                        RequireKey.NUMERIC_FLUENTS)
                                                || this.isRequirement(
                                                        RequireKey.OBJECT_FLUENTS);
                                        jj_lookingAhead = false;
                                        if (!jj_semLA || jj_3_37())
                                            return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_74()
    {
        if (jj_3R_90())
            return true;
        return false;
    }

    private boolean jj_3_73()
    {
        if (jj_3R_91())
            return true;
        return false;
    }

    private boolean jj_3R_136()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(END))
            return true;
        return false;
    }

    private boolean jj_3R_27()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(REQUIREMENTS))
            return true;
        return false;
    }

    private boolean jj_3R_49()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(HOLD_AFTER))
            return true;
        return false;
    }

    private boolean jj_3R_135()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(START))
            return true;
        return false;
    }

    private boolean jj_3_132()
    {
        if (jj_3R_136())
            return true;
        return false;
    }

    private boolean jj_3_131()
    {
        if (jj_3R_135())
            return true;
        return false;
    }

    private boolean jj_3R_89()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(WHEN))
            return true;
        return false;
    }

    private boolean jj_3_7()
    {
        if (jj_3R_33())
            return true;
        return false;
    }

    private boolean jj_3_6()
    {
        if (jj_3R_32())
            return true;
        return false;
    }

    private boolean jj_3_130()
    {
        if (jj_3R_134())
            return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if (jj_3R_31())
            return true;
        return false;
    }

    private boolean jj_3_129()
    {
        if (jj_3R_133())
            return true;
        return false;
    }

    private boolean jj_3_4()
    {
        if (jj_3R_30())
            return true;
        return false;
    }

    private boolean jj_3_3()
    {
        if (jj_3R_29())
            return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_3R_28())
            return true;
        return false;
    }

    private boolean jj_3R_48()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(HOLD_DURING))
            return true;
        return false;
    }

    private boolean jj_3_1()
    {
        if (jj_3R_27())
            return true;
        return false;
    }

    private boolean jj_3R_88()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3R_122()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_129())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.CONTINOUS_EFFECTS);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_130())
                return true;
        }
        return false;
    }

    private boolean jj_3_72()
    {
        if (jj_3R_90())
            return true;
        return false;
    }

    private boolean jj_3_128()
    {
        if (jj_3R_132())
            return true;
        return false;
    }

    private boolean jj_3_69()
    {
        if (jj_3R_87())
            return true;
        return false;
    }

    private boolean jj_3_71()
    {
        if (jj_3R_89())
            return true;
        return false;
    }

    private boolean jj_3_70()
    {
        if (jj_3R_88())
            return true;
        return false;
    }

    private boolean jj_3R_121()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_87()
    {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3_70())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_71())
            {
                jj_scanpos = xsp;
                if (jj_3_72())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_47()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ALWAYS_WITHIN))
            return true;
        return false;
    }

    private boolean jj_3_194()
    {
        if (jj_3R_171())
            return true;
        return false;
    }

    private boolean jj_3R_142()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_86()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_166()
    {
        if (jj_scan_token(RIGHT_BRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_169()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(MUL))
            return true;
        return false;
    }

    private boolean jj_3_68()
    {
        if (jj_3R_87())
            return true;
        return false;
    }

    private boolean jj_3R_123()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3_67()
    {
        if (jj_3R_86())
            return true;
        return false;
    }

    private boolean jj_3R_46()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SOMETIME_BEFORE))
            return true;
        return false;
    }

    private boolean jj_3R_170()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DIV))
            return true;
        return false;
    }

    private boolean jj_3R_185()
    {
        if (jj_scan_token(SYMBOL))
            return true;
        return false;
    }

    private boolean jj_3R_124()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(WHEN))
            return true;
        return false;
    }

    private boolean jj_3R_181()
    {
        if (jj_3R_185())
            return true;
        return false;
    }

    private boolean jj_3R_45()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SOMETIME_AFTER))
            return true;
        return false;
    }

    private boolean jj_3_127()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_126()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_81()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(PREFERENCE))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_181())
            jj_scanpos = xsp;
        if (jj_3R_62())
            return true;
        return false;
    }

    private boolean jj_3R_168()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SUB))
            return true;
        return false;
    }

    private boolean jj_3R_130()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DECREASE))
            return true;
        return false;
    }

    private boolean jj_3R_44()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT_MOST_ONCE))
            return true;
        return false;
    }

    private boolean jj_3_193()
    {
        if (jj_3R_171())
            return true;
        return false;
    }

    private boolean jj_3_125()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_124()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_83()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3R_167()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ADD))
            return true;
        return false;
    }

    private boolean jj_3R_129()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(INCREASE))
            return true;
        return false;
    }

    private boolean jj_3_192()
    {
        if (jj_3R_170())
            return true;
        return false;
    }

    private boolean jj_3_66()
    {
        if (jj_3R_85())
            return true;
        return false;
    }

    private boolean jj_3_191()
    {
        if (jj_3R_169())
            return true;
        return false;
    }

    private boolean jj_3R_43()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(WITHIN))
            return true;
        return false;
    }

    private boolean jj_3_190()
    {
        if (jj_3R_168())
            return true;
        return false;
    }

    private boolean jj_3_123()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_189()
    {
        if (jj_3R_167())
            return true;
        return false;
    }

    private boolean jj_3_122()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_161()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_189())
        {
            jj_scanpos = xsp;
            if (jj_3_190())
            {
                jj_scanpos = xsp;
                if (jj_3_191())
                {
                    jj_scanpos = xsp;
                    if (jj_3_192())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_82()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_128()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SCALE_DOWN))
            return true;
        return false;
    }

    private boolean jj_3R_42()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SOMETIME))
            return true;
        return false;
    }

    private boolean jj_3_121()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_120()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_84()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(RIGHT_BRACKET))
            return true;
        return false;
    }

    private boolean jj_3_188()
    {
        if (jj_scan_token(TOTAL_TIME))
            return true;
        return false;
    }

    private boolean jj_3_187()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(TOTAL_TIME))
            return true;
        if (jj_3R_166())
            return true;
        return false;
    }

    private boolean jj_3R_163()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_187())
        {
            jj_scanpos = xsp;
            if (jj_3_188())
                return true;
        }
        return false;
    }

    private boolean jj_3_65()
    {
        if (jj_3R_62())
            return true;
        return false;
    }

    private boolean jj_3_64()
    {
        if (jj_3R_84())
            return true;
        return false;
    }

    private boolean jj_3_63()
    {
        if (jj_3R_83())
            return true;
        return false;
    }

    private boolean jj_3R_127()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SCALE_UP))
            return true;
        return false;
    }

    private boolean jj_3_62()
    {
        if (jj_3R_82())
            return true;
        return false;
    }

    private boolean jj_3_61()
    {
        if (jj_3R_81())
            return true;
        return false;
    }

    private boolean jj_3R_41()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ALWAYS))
            return true;
        return false;
    }

    private boolean jj_3_186()
    {
        if (jj_3R_165())
            return true;
        return false;
    }

    private boolean jj_3_119()
    {
        if (jj_3R_131())
            return true;
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_118()
    {
        if (jj_3R_70())
            return true;
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_85()
    {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3_61())
        {
            jj_scanpos = xsp;
            if (jj_3_62())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this
                        .isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_63())
                {
                    jj_scanpos = xsp;
                    if (jj_3_64())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_65())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_40()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        return false;
    }

    private boolean jj_3R_162()
    {
        if (jj_3R_142())
            return true;
        if (jj_3R_173())
            return true;
        return false;
    }

    private boolean jj_3R_126()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ASSIGN))
            return true;
        return false;
    }

    private boolean jj_3_117()
    {
        if (jj_3R_130())
            return true;
        return false;
    }

    private boolean jj_3_116()
    {
        if (jj_3R_129())
            return true;
        return false;
    }

    private boolean jj_3_115()
    {
        if (jj_3R_128())
            return true;
        return false;
    }

    private boolean jj_3_114()
    {
        if (jj_3R_127())
            return true;
        return false;
    }

    private boolean jj_3_113()
    {
        if (jj_3R_126())
            return true;
        return false;
    }

    private boolean jj_3R_164()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(IS_VIOLATED))
            return true;
        return false;
    }

    private boolean jj_3R_125()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_113())
        {
            jj_scanpos = xsp;
            if (jj_3_114())
            {
                jj_scanpos = xsp;
                if (jj_3_115())
                {
                    jj_scanpos = xsp;
                    if (jj_3_116())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_117())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_185()
    {
        if (jj_3R_164())
            return true;
        return false;
    }

    private boolean jj_3_184()
    {
        if (jj_3R_163())
            return true;
        return false;
    }

    private boolean jj_3R_39()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3_183()
    {
        if (jj_3R_162())
            return true;
        return false;
    }

    private boolean jj_3R_78()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ACTION))
            return true;
        return false;
    }

    private boolean jj_3_182()
    {
        if (jj_3R_109())
            return true;
        return false;
    }

    private boolean jj_3_181()
    {
        if (jj_3R_161())
            return true;
        return false;
    }

    private boolean jj_3_112()
    {
        if (jj_3R_125())
            return true;
        return false;
    }

    private boolean jj_3_28()
    {
        if (jj_3R_50())
            return true;
        return false;
    }

    private boolean jj_3_111()
    {
        if (jj_3R_124())
            return true;
        return false;
    }

    private boolean jj_3_110()
    {
        if (jj_3R_123())
            return true;
        return false;
    }

    private boolean jj_3R_171()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_181())
        {
            jj_scanpos = xsp;
            if (jj_3_182())
            {
                jj_scanpos = xsp;
                if (jj_3_183())
                {
                    jj_scanpos = xsp;
                    if (jj_3_184())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_185())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_109()
    {
        if (jj_3R_122())
            return true;
        return false;
    }

    private boolean jj_3_108()
    {
        if (jj_3R_121())
            return true;
        return false;
    }

    private boolean jj_3R_38()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3_27()
    {
        if (jj_3R_49())
            return true;
        return false;
    }

    private boolean jj_3R_132()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_108())
        {
            jj_scanpos = xsp;
            if (jj_3_109())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_110())
                {
                    jj_scanpos = xsp;
                    jj_lookingAhead = true;
                    jj_semLA = this
                            .isRequirement(RequireKey.CONDITIONAL_EFFECTS);
                    jj_lookingAhead = false;
                    if (!jj_semLA || jj_3_111())
                    {
                        jj_scanpos = xsp;
                        jj_lookingAhead = true;
                        jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                                || this.isRequirement(
                                        RequireKey.NUMERIC_FLUENTS)
                                || this.isRequirement(
                                        RequireKey.OBJECT_FLUENTS);
                        jj_lookingAhead = false;
                        if (!jj_semLA || jj_3_112())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_26()
    {
        if (jj_3R_48())
            return true;
        return false;
    }

    private boolean jj_3_25()
    {
        if (jj_3R_47())
            return true;
        return false;
    }

    private boolean jj_3R_80()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(DERIVED))
            return true;
        return false;
    }

    private boolean jj_3_24()
    {
        if (jj_3R_46())
            return true;
        return false;
    }

    private boolean jj_3_23()
    {
        if (jj_3R_45())
            return true;
        return false;
    }

    private boolean jj_3R_160()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(METRIC))
            return true;
        if (jj_scan_token(MINIMIZE))
            return true;
        return false;
    }

    private boolean jj_3_22()
    {
        if (jj_3R_44())
            return true;
        return false;
    }

    private boolean jj_3_21()
    {
        if (jj_3R_43())
            return true;
        return false;
    }

    private boolean jj_3_20()
    {
        if (jj_3R_42())
            return true;
        return false;
    }

    private boolean jj_3_60()
    {
        if (jj_3R_80())
            return true;
        return false;
    }

    private boolean jj_3_19()
    {
        if (jj_3R_41())
            return true;
        return false;
    }

    private boolean jj_3_18()
    {
        if (jj_3R_40())
            return true;
        return false;
    }

    private boolean jj_3_17()
    {
        if (jj_3R_39())
            return true;
        return false;
    }

    private boolean jj_3_16()
    {
        if (jj_3R_38())
            return true;
        return false;
    }

    private boolean jj_3_59()
    {
        if (jj_3R_79())
            return true;
        return false;
    }

    private boolean jj_3R_120()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        return false;
    }

    private boolean jj_3_58()
    {
        if (jj_3R_78())
            return true;
        return false;
    }

    private boolean jj_3R_50()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_16())
        {
            jj_scanpos = xsp;
            if (jj_3_17())
            {
                jj_scanpos = xsp;
                if (jj_3_18())
                {
                    jj_scanpos = xsp;
                    if (jj_3_19())
                    {
                        jj_scanpos = xsp;
                        if (jj_3_20())
                        {
                            jj_scanpos = xsp;
                            if (jj_3_21())
                            {
                                jj_scanpos = xsp;
                                if (jj_3_22())
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3_23())
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_3_24())
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_3_25())
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_3_26())
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_27())
                                                        return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_159()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(METRIC))
            return true;
        if (jj_scan_token(MAXIMIZE))
            return true;
        return false;
    }

    private boolean jj_3_180()
    {
        if (jj_3R_160())
            return true;
        return false;
    }

    private boolean jj_3_179()
    {
        if (jj_3R_159())
            return true;
        return false;
    }

    private boolean jj_3_15()
    {
        if (jj_3R_37())
            return true;
        return false;
    }

    private boolean jj_3R_33()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_58())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.DURATIVE_ACTIONS);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_59())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this.isRequirement(RequireKey.DERIVED_PREDICATES);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_60())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_119()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_scan_token(START))
            return true;
        return false;
    }

    private boolean jj_3_14()
    {
        if (jj_scan_token(NUMBER_TYPE))
            return true;
        return false;
    }

    private boolean jj_3_107()
    {
        if (jj_3R_120())
            return true;
        return false;
    }

    private boolean jj_3_106()
    {
        if (jj_3R_119())
            return true;
        return false;
    }

    private boolean jj_3R_178()
    {
        if (jj_3R_173())
            return true;
        return false;
    }

    private boolean jj_3_57()
    {
        if (jj_3R_77())
            return true;
        return false;
    }

    private boolean jj_3R_177()
    {
        if (jj_3R_142())
            return true;
        if (jj_3R_173())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_57())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_166())
            return true;
        return false;
    }

    private boolean jj_3R_151()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_179())
        {
            jj_scanpos = xsp;
            if (jj_3_180())
                return true;
        }
        return false;
    }

    private boolean jj_3R_70()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_177())
        {
            jj_scanpos = xsp;
            if (jj_3R_178())
                return true;
        }
        return false;
    }

    private boolean jj_3R_117()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_106())
        {
            jj_scanpos = xsp;
            if (jj_3_107())
                return true;
        }
        return false;
    }

    private boolean jj_3R_118()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(OVER))
            return true;
        return false;
    }

    private boolean jj_3R_72()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SUB))
            return true;
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3R_156()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3_105()
    {
        if (jj_3R_118())
            return true;
        return false;
    }

    private boolean jj_3_104()
    {
        if (jj_3R_117())
            return true;
        return false;
    }

    private boolean jj_3_13()
    {
        if (jj_3R_36())
            return true;
        return false;
    }

    private boolean jj_3R_115()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_104())
        {
            jj_scanpos = xsp;
            if (jj_3_105())
                return true;
        }
        return false;
    }

    private boolean jj_3R_76()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(DIV))
            return true;
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3R_157()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(PREFERENCE))
            return true;
        return false;
    }

    private boolean jj_3_178()
    {
        if (jj_3R_158())
            return true;
        return false;
    }

    private boolean jj_3R_116()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(PREFERENCE))
            return true;
        return false;
    }

    private boolean jj_3R_173()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(105))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(96))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(90))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(92))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(91))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(93))
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_103()
    {
        if (jj_3R_116())
            return true;
        return false;
    }

    private boolean jj_3R_155()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_75()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(MUL))
            return true;
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3_102()
    {
        if (jj_3R_115())
            return true;
        return false;
    }

    private boolean jj_3_177()
    {
        if (jj_3R_50())
            return true;
        return false;
    }

    private boolean jj_3_176()
    {
        if (jj_3R_157())
            return true;
        return false;
    }

    private boolean jj_3R_111()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_102())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_103())
                return true;
        }
        return false;
    }

    private boolean jj_3_175()
    {
        if (jj_3R_156())
            return true;
        return false;
    }

    private boolean jj_3_174()
    {
        if (jj_3R_155())
            return true;
        return false;
    }

    private boolean jj_3_101()
    {
        if (jj_3R_114())
            return true;
        return false;
    }

    private boolean jj_3R_36()
    {
        if (jj_3R_142())
            return true;
        if (jj_3R_173())
            return true;
        return false;
    }

    private boolean jj_3R_74()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(SUB))
            return true;
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3R_158()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_174())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3_175())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_176())
                {
                    jj_scanpos = xsp;
                    if (jj_3_177())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_112()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(AND))
            return true;
        return false;
    }

    private boolean jj_3R_31()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(FUNCTIONS))
            return true;
        return false;
    }

    private boolean jj_3R_73()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(ADD))
            return true;
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3R_32()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(CONSTRAINTS))
            return true;
        return false;
    }

    private boolean jj_3_56()
    {
        if (jj_3R_76())
            return true;
        return false;
    }

    private boolean jj_3_55()
    {
        if (jj_3R_75())
            return true;
        return false;
    }

    private boolean jj_3R_113()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(FORALL))
            return true;
        return false;
    }

    private boolean jj_3_54()
    {
        if (jj_3R_74())
            return true;
        return false;
    }

    private boolean jj_3R_184()
    {
        if (jj_scan_token(VARIABLE_SYMBOL))
            return true;
        return false;
    }

    private boolean jj_3_53()
    {
        if (jj_3R_73())
            return true;
        return false;
    }

    private boolean jj_3_100()
    {
        if (jj_3R_113())
            return true;
        return false;
    }

    private boolean jj_3_99()
    {
        if (jj_3R_112())
            return true;
        return false;
    }

    private boolean jj_3_98()
    {
        if (jj_3R_111())
            return true;
        return false;
    }

    private boolean jj_3R_71()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_53())
        {
            jj_scanpos = xsp;
            if (jj_3_54())
            {
                jj_scanpos = xsp;
                if (jj_3_55())
                {
                    jj_scanpos = xsp;
                    if (jj_3_56())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_52()
    {
        if (jj_3R_72())
            return true;
        return false;
    }

    private boolean jj_3_51()
    {
        if (jj_3R_71())
            return true;
        return false;
    }

    private boolean jj_3R_172()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(105))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(90))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(92))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(91))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(93))
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_114()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_98())
        {
            jj_scanpos = xsp;
            if (jj_3_99())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this
                        .isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_100())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3_97()
    {
        if (jj_3R_110())
            return true;
        return false;
    }

    private boolean jj_3R_69()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_51())
        {
            jj_scanpos = xsp;
            if (jj_3_52())
                return true;
        }
        return false;
    }

    private boolean jj_3_96()
    {
        if (jj_3R_109())
            return true;
        return false;
    }

    private boolean jj_3_12()
    {
        if (jj_3R_35())
            return true;
        return false;
    }

    private boolean jj_3R_35()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_3R_172())
            return true;
        return false;
    }

    private boolean jj_3R_109()
    {
        if (jj_scan_token(NUMBER))
            return true;
        return false;
    }

    private boolean jj_3R_153()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(AT))
            return true;
        if (jj_3R_109())
            return true;
        return false;
    }

    private boolean jj_3_50()
    {
        if (jj_3R_70())
            return true;
        return false;
    }

    private boolean jj_3_49()
    {
        if (jj_3R_69())
            return true;
        return false;
    }

    private boolean jj_3R_182()
    {
        if (jj_3R_109())
            return true;
        return false;
    }

    private boolean jj_3R_145()
    {
        if (jj_scan_token(VAR_DURATION))
            return true;
        return false;
    }

    private boolean jj_3R_110()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_182())
        {
            jj_scanpos = xsp;
            if (jj_3_49())
            {
                jj_scanpos = xsp;
                if (jj_3_50())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_30()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(PREDICATES))
            return true;
        return false;
    }

    private boolean jj_3R_154()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EQUAL))
            return true;
        return false;
    }

    private boolean jj_3R_108()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(LEQUAL))
            return true;
        return false;
    }

    private boolean jj_3R_165()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(105))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(90))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(92))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(91))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(93))
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_173()
    {
        if (jj_3R_154())
            return true;
        return false;
    }

    private boolean jj_3_172()
    {
        if (jj_3R_94())
            return true;
        return false;
    }

    private boolean jj_3R_68()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(EQUAL))
            return true;
        return false;
    }

    private boolean jj_3_171()
    {
        if (jj_3R_153())
            return true;
        return false;
    }

    private boolean jj_3_170()
    {
        if (jj_3R_152())
            return true;
        return false;
    }

    private boolean jj_3R_152()
    {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = this.isRequirement(RequireKey.TIMED_INITIAL_LITERALS);
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3_171())
        {
            jj_scanpos = xsp;
            if (jj_3_172())
            {
                jj_scanpos = xsp;
                jj_lookingAhead = true;
                jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                        || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                        || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                        || this.isRequirement(RequireKey.ACTION_COSTS);
                jj_lookingAhead = false;
                if (!jj_semLA || jj_3_173())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_107()
    {
        if (jj_scan_token(LEFT_BRACKET))
            return true;
        if (jj_scan_token(GEQUAL))
            return true;
        return false;
    }

    private boolean jj_3R_29()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(CONSTANTS))
            return true;
        return false;
    }

    private boolean jj_3R_65()
    {
        if (jj_3R_142())
            return true;
        if (jj_scan_token(LESS))
            return true;
        return false;
    }

    /** Generated Token Manager. */
    public LexerTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private boolean jj_lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[21];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[]
        { 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x2000, 0x0, 0x2000, 0x0, 0x0, 0x2000, };
    }

    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[]
        { 0x1fffff80, 0x1fffff80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    private static void jj_la1_init_2()
    {
        jj_la1_2 = new int[]
        { 0x0, 0x0, 0x0, 0x3c000000, 0x0, 0x0, 0x0, 0x3c000000, 0x3c000000,
                0x3c000000, 0x20, 0x3c000000, 0x3c000000, 0x3c000000, 0x0,
                0x3c000000, 0x0, 0x0, 0x0, 0x0, 0x80000000, };
    }

    private static void jj_la1_init_3()
    {
        jj_la1_3 = new int[]
        { 0x0, 0x0, 0x2c0, 0x200, 0x100, 0x2c0, 0x2c0, 0x200, 0x200, 0x201, 0x0,
                0x200, 0x300, 0x300, 0x400, 0x201, 0x200, 0x400, 0x200, 0x200,
                0x400, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[194];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public Lexer(java.io.InputStream stream)
    {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public Lexer(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source = new LexerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream)
    {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public Lexer(java.io.Reader stream)
    {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new LexerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream)
    {
        if (jj_input_stream == null)
        {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        }
        else
        {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null)
        {
            token_source = new LexerTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public Lexer(LexerTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(LexerTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException
    {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind)
        {
            jj_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error
    {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
                        .getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan)
        {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos)
            {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken()
    {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index)
    {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++)
        {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f()
    {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100)
        {
            return;
        }

        if (pos == jj_endpos + 1)
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++)
            {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries)
            {
                if (oldentry.length == jj_expentry.length)
                {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++)
                    {
                        if (oldentry[i] != jj_expentry[i])
                        {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched)
                    {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0)
            {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException()
    {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[110];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 21; i++)
        {
            if (jj_la1[i] == jj_gen)
            {
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                    {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                    {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0)
                    {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0)
                    {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 110; i++)
        {
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++)
        {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing()
    {
    }

    /** Disable tracing. */
    final public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 194; i++)
        {
            try
            {
                JJCalls p = jj_2_rtns[i];

                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                        case 20:
                            jj_3_21();
                            break;
                        case 21:
                            jj_3_22();
                            break;
                        case 22:
                            jj_3_23();
                            break;
                        case 23:
                            jj_3_24();
                            break;
                        case 24:
                            jj_3_25();
                            break;
                        case 25:
                            jj_3_26();
                            break;
                        case 26:
                            jj_3_27();
                            break;
                        case 27:
                            jj_3_28();
                            break;
                        case 28:
                            jj_3_29();
                            break;
                        case 29:
                            jj_3_30();
                            break;
                        case 30:
                            jj_3_31();
                            break;
                        case 31:
                            jj_3_32();
                            break;
                        case 32:
                            jj_3_33();
                            break;
                        case 33:
                            jj_3_34();
                            break;
                        case 34:
                            jj_3_35();
                            break;
                        case 35:
                            jj_3_36();
                            break;
                        case 36:
                            jj_3_37();
                            break;
                        case 37:
                            jj_3_38();
                            break;
                        case 38:
                            jj_3_39();
                            break;
                        case 39:
                            jj_3_40();
                            break;
                        case 40:
                            jj_3_41();
                            break;
                        case 41:
                            jj_3_42();
                            break;
                        case 42:
                            jj_3_43();
                            break;
                        case 43:
                            jj_3_44();
                            break;
                        case 44:
                            jj_3_45();
                            break;
                        case 45:
                            jj_3_46();
                            break;
                        case 46:
                            jj_3_47();
                            break;
                        case 47:
                            jj_3_48();
                            break;
                        case 48:
                            jj_3_49();
                            break;
                        case 49:
                            jj_3_50();
                            break;
                        case 50:
                            jj_3_51();
                            break;
                        case 51:
                            jj_3_52();
                            break;
                        case 52:
                            jj_3_53();
                            break;
                        case 53:
                            jj_3_54();
                            break;
                        case 54:
                            jj_3_55();
                            break;
                        case 55:
                            jj_3_56();
                            break;
                        case 56:
                            jj_3_57();
                            break;
                        case 57:
                            jj_3_58();
                            break;
                        case 58:
                            jj_3_59();
                            break;
                        case 59:
                            jj_3_60();
                            break;
                        case 60:
                            jj_3_61();
                            break;
                        case 61:
                            jj_3_62();
                            break;
                        case 62:
                            jj_3_63();
                            break;
                        case 63:
                            jj_3_64();
                            break;
                        case 64:
                            jj_3_65();
                            break;
                        case 65:
                            jj_3_66();
                            break;
                        case 66:
                            jj_3_67();
                            break;
                        case 67:
                            jj_3_68();
                            break;
                        case 68:
                            jj_3_69();
                            break;
                        case 69:
                            jj_3_70();
                            break;
                        case 70:
                            jj_3_71();
                            break;
                        case 71:
                            jj_3_72();
                            break;
                        case 72:
                            jj_3_73();
                            break;
                        case 73:
                            jj_3_74();
                            break;
                        case 74:
                            jj_3_75();
                            break;
                        case 75:
                            jj_3_76();
                            break;
                        case 76:
                            jj_3_77();
                            break;
                        case 77:
                            jj_3_78();
                            break;
                        case 78:
                            jj_3_79();
                            break;
                        case 79:
                            jj_3_80();
                            break;
                        case 80:
                            jj_3_81();
                            break;
                        case 81:
                            jj_3_82();
                            break;
                        case 82:
                            jj_3_83();
                            break;
                        case 83:
                            jj_3_84();
                            break;
                        case 84:
                            jj_3_85();
                            break;
                        case 85:
                            jj_3_86();
                            break;
                        case 86:
                            jj_3_87();
                            break;
                        case 87:
                            jj_3_88();
                            break;
                        case 88:
                            jj_3_89();
                            break;
                        case 89:
                            jj_3_90();
                            break;
                        case 90:
                            jj_3_91();
                            break;
                        case 91:
                            jj_3_92();
                            break;
                        case 92:
                            jj_3_93();
                            break;
                        case 93:
                            jj_3_94();
                            break;
                        case 94:
                            jj_3_95();
                            break;
                        case 95:
                            jj_3_96();
                            break;
                        case 96:
                            jj_3_97();
                            break;
                        case 97:
                            jj_3_98();
                            break;
                        case 98:
                            jj_3_99();
                            break;
                        case 99:
                            jj_3_100();
                            break;
                        case 100:
                            jj_3_101();
                            break;
                        case 101:
                            jj_3_102();
                            break;
                        case 102:
                            jj_3_103();
                            break;
                        case 103:
                            jj_3_104();
                            break;
                        case 104:
                            jj_3_105();
                            break;
                        case 105:
                            jj_3_106();
                            break;
                        case 106:
                            jj_3_107();
                            break;
                        case 107:
                            jj_3_108();
                            break;
                        case 108:
                            jj_3_109();
                            break;
                        case 109:
                            jj_3_110();
                            break;
                        case 110:
                            jj_3_111();
                            break;
                        case 111:
                            jj_3_112();
                            break;
                        case 112:
                            jj_3_113();
                            break;
                        case 113:
                            jj_3_114();
                            break;
                        case 114:
                            jj_3_115();
                            break;
                        case 115:
                            jj_3_116();
                            break;
                        case 116:
                            jj_3_117();
                            break;
                        case 117:
                            jj_3_118();
                            break;
                        case 118:
                            jj_3_119();
                            break;
                        case 119:
                            jj_3_120();
                            break;
                        case 120:
                            jj_3_121();
                            break;
                        case 121:
                            jj_3_122();
                            break;
                        case 122:
                            jj_3_123();
                            break;
                        case 123:
                            jj_3_124();
                            break;
                        case 124:
                            jj_3_125();
                            break;
                        case 125:
                            jj_3_126();
                            break;
                        case 126:
                            jj_3_127();
                            break;
                        case 127:
                            jj_3_128();
                            break;
                        case 128:
                            jj_3_129();
                            break;
                        case 129:
                            jj_3_130();
                            break;
                        case 130:
                            jj_3_131();
                            break;
                        case 131:
                            jj_3_132();
                            break;
                        case 132:
                            jj_3_133();
                            break;
                        case 133:
                            jj_3_134();
                            break;
                        case 134:
                            jj_3_135();
                            break;
                        case 135:
                            jj_3_136();
                            break;
                        case 136:
                            jj_3_137();
                            break;
                        case 137:
                            jj_3_138();
                            break;
                        case 138:
                            jj_3_139();
                            break;
                        case 139:
                            jj_3_140();
                            break;
                        case 140:
                            jj_3_141();
                            break;
                        case 141:
                            jj_3_142();
                            break;
                        case 142:
                            jj_3_143();
                            break;
                        case 143:
                            jj_3_144();
                            break;
                        case 144:
                            jj_3_145();
                            break;
                        case 145:
                            jj_3_146();
                            break;
                        case 146:
                            jj_3_147();
                            break;
                        case 147:
                            jj_3_148();
                            break;
                        case 148:
                            jj_3_149();
                            break;
                        case 149:
                            jj_3_150();
                            break;
                        case 150:
                            jj_3_151();
                            break;
                        case 151:
                            jj_3_152();
                            break;
                        case 152:
                            jj_3_153();
                            break;
                        case 153:
                            jj_3_154();
                            break;
                        case 154:
                            jj_3_155();
                            break;
                        case 155:
                            jj_3_156();
                            break;
                        case 156:
                            jj_3_157();
                            break;
                        case 157:
                            jj_3_158();
                            break;
                        case 158:
                            jj_3_159();
                            break;
                        case 159:
                            jj_3_160();
                            break;
                        case 160:
                            jj_3_161();
                            break;
                        case 161:
                            jj_3_162();
                            break;
                        case 162:
                            jj_3_163();
                            break;
                        case 163:
                            jj_3_164();
                            break;
                        case 164:
                            jj_3_165();
                            break;
                        case 165:
                            jj_3_166();
                            break;
                        case 166:
                            jj_3_167();
                            break;
                        case 167:
                            jj_3_168();
                            break;
                        case 168:
                            jj_3_169();
                            break;
                        case 169:
                            jj_3_170();
                            break;
                        case 170:
                            jj_3_171();
                            break;
                        case 171:
                            jj_3_172();
                            break;
                        case 172:
                            jj_3_173();
                            break;
                        case 173:
                            jj_3_174();
                            break;
                        case 174:
                            jj_3_175();
                            break;
                        case 175:
                            jj_3_176();
                            break;
                        case 176:
                            jj_3_177();
                            break;
                        case 177:
                            jj_3_178();
                            break;
                        case 178:
                            jj_3_179();
                            break;
                        case 179:
                            jj_3_180();
                            break;
                        case 180:
                            jj_3_181();
                            break;
                        case 181:
                            jj_3_182();
                            break;
                        case 182:
                            jj_3_183();
                            break;
                        case 183:
                            jj_3_184();
                            break;
                        case 184:
                            jj_3_185();
                            break;
                        case 185:
                            jj_3_186();
                            break;
                        case 186:
                            jj_3_187();
                            break;
                        case 187:
                            jj_3_188();
                            break;
                        case 188:
                            jj_3_189();
                            break;
                        case 189:
                            jj_3_190();
                            break;
                        case 190:
                            jj_3_191();
                            break;
                        case 191:
                            jj_3_192();
                            break;
                        case 192:
                            jj_3_193();
                            break;
                        case 193:
                            jj_3_194();
                            break;
                        }
                    }
                    p = p.next;
                }
                while (p != null);

            }
            catch (LookaheadSuccess ls)
            {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen)
        {
            if (p.next == null)
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
