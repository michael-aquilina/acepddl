/* Generated By:JavaCC: Do not edit this line. LexerConstants.java */
package fr.uga.pddl4j.parser.lexer;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface LexerConstants
{

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int SINGLE_LINE_COMMENT = 9;
    /** RegularExpression Id. */
    int FORMAL_COMMENT = 10;
    /** RegularExpression Id. */
    int MULTI_LINE_COMMENT = 11;
    /** RegularExpression Id. */
    int LEFT_BRACKET = 13;
    /** RegularExpression Id. */
    int RIGHT_BRACKET = 14;
    /** RegularExpression Id. */
    int DEFINE = 15;
    /** RegularExpression Id. */
    int DOMAIN = 16;
    /** RegularExpression Id. */
    int REQUIREMENTS = 17;
    /** RegularExpression Id. */
    int TYPES = 18;
    /** RegularExpression Id. */
    int EITHER = 19;
    /** RegularExpression Id. */
    int CONSTANTS = 20;
    /** RegularExpression Id. */
    int PREDICATES = 21;
    /** RegularExpression Id. */
    int FUNCTIONS = 22;
    /** RegularExpression Id. */
    int ACTION = 23;
    /** RegularExpression Id. */
    int PARAMETERS = 24;
    /** RegularExpression Id. */
    int PRECONDITION = 25;
    /** RegularExpression Id. */
    int EFFECT = 26;
    /** RegularExpression Id. */
    int PREFERENCE = 27;
    /** RegularExpression Id. */
    int WHEN = 28;
    /** RegularExpression Id. */
    int DURATIVE_ACTION = 29;
    /** RegularExpression Id. */
    int DURATION = 30;
    /** RegularExpression Id. */
    int CONDITION = 31;
    /** RegularExpression Id. */
    int DERIVED = 32;
    /** RegularExpression Id. */
    int PROBLEM = 33;
    /** RegularExpression Id. */
    int P_DOMAIN = 34;
    /** RegularExpression Id. */
    int OBJECTS = 35;
    /** RegularExpression Id. */
    int INIT = 36;
    /** RegularExpression Id. */
    int GOAL = 37;
    /** RegularExpression Id. */
    int METRIC = 38;
    /** RegularExpression Id. */
    int STRIPS = 39;
    /** RegularExpression Id. */
    int TYPING = 40;
    /** RegularExpression Id. */
    int NEGATIVE_PRECONDITIONS = 41;
    /** RegularExpression Id. */
    int DISJUNCTIVE_PRECONDITIONS = 42;
    /** RegularExpression Id. */
    int EQUALITY = 43;
    /** RegularExpression Id. */
    int EXISTENTIAL_PRECONDITIONS = 44;
    /** RegularExpression Id. */
    int UNIVERSAL_PRECONDITIONS = 45;
    /** RegularExpression Id. */
    int QUANTIFIED_PRECONDITIONS = 46;
    /** RegularExpression Id. */
    int CONDITIONAL_EFFECTS = 47;
    /** RegularExpression Id. */
    int ACTION_COSTS = 48;
    /** RegularExpression Id. */
    int FLUENTS = 49;
    /** RegularExpression Id. */
    int NUMERIC_FLUENTS = 50;
    /** RegularExpression Id. */
    int OBJECT_FLUENTS = 51;
    /** RegularExpression Id. */
    int GOAL_UTILITIES = 52;
    /** RegularExpression Id. */
    int ADL = 53;
    /** RegularExpression Id. */
    int DURATIVE_ACTIONS = 54;
    /** RegularExpression Id. */
    int DERIVED_PREDICATES = 55;
    /** RegularExpression Id. */
    int TIMED_INITIAL_LITERALS = 56;
    /** RegularExpression Id. */
    int PREFERENCES = 57;
    /** RegularExpression Id. */
    int CONSTRAINTS = 58;
    /** RegularExpression Id. */
    int CONTINUS_EFFECTS = 59;
    /** RegularExpression Id. */
    int DURATION_INEQUALITIES = 60;
    /** RegularExpression Id. */
    int GREATER = 61;
    /** RegularExpression Id. */
    int LESS = 62;
    /** RegularExpression Id. */
    int GEQUAL = 63;
    /** RegularExpression Id. */
    int LEQUAL = 64;
    /** RegularExpression Id. */
    int EQUAL = 65;
    /** RegularExpression Id. */
    int MUL = 66;
    /** RegularExpression Id. */
    int DIV = 67;
    /** RegularExpression Id. */
    int ADD = 68;
    /** RegularExpression Id. */
    int SUB = 69;
    /** RegularExpression Id. */
    int ASSIGN = 70;
    /** RegularExpression Id. */
    int SCALE_UP = 71;
    /** RegularExpression Id. */
    int SCALE_DOWN = 72;
    /** RegularExpression Id. */
    int INCREASE = 73;
    /** RegularExpression Id. */
    int DECREASE = 74;
    /** RegularExpression Id. */
    int OR = 75;
    /** RegularExpression Id. */
    int AND = 76;
    /** RegularExpression Id. */
    int IMPLY = 77;
    /** RegularExpression Id. */
    int NOT = 78;
    /** RegularExpression Id. */
    int FORALL = 79;
    /** RegularExpression Id. */
    int EXISTS = 80;
    /** RegularExpression Id. */
    int ALWAYS = 81;
    /** RegularExpression Id. */
    int SOMETIME = 82;
    /** RegularExpression Id. */
    int WITHIN = 83;
    /** RegularExpression Id. */
    int AT_MOST_ONCE = 84;
    /** RegularExpression Id. */
    int SOMETIME_AFTER = 85;
    /** RegularExpression Id. */
    int SOMETIME_BEFORE = 86;
    /** RegularExpression Id. */
    int ALWAYS_WITHIN = 87;
    /** RegularExpression Id. */
    int HOLD_DURING = 88;
    /** RegularExpression Id. */
    int HOLD_AFTER = 89;
    /** RegularExpression Id. */
    int AT = 90;
    /** RegularExpression Id. */
    int START = 91;
    /** RegularExpression Id. */
    int END = 92;
    /** RegularExpression Id. */
    int OVER = 93;
    /** RegularExpression Id. */
    int ALL = 94;
    /** RegularExpression Id. */
    int TOTAL_TIME = 95;
    /** RegularExpression Id. */
    int TOTAL_COST = 96;
    /** RegularExpression Id. */
    int MAXIMIZE = 97;
    /** RegularExpression Id. */
    int MINIMIZE = 98;
    /** RegularExpression Id. */
    int IS_VIOLATED = 99;
    /** RegularExpression Id. */
    int VAR_DURATION = 100;
    /** RegularExpression Id. */
    int CONTINUOUS_VARIABLE = 101;
    /** RegularExpression Id. */
    int NUMBER_TYPE = 102;
    /** RegularExpression Id. */
    int OBJECT_TYPE = 103;
    /** RegularExpression Id. */
    int VARIABLE_SYMBOL = 104;
    /** RegularExpression Id. */
    int SYMBOL = 105;
    /** RegularExpression Id. */
    int NUMBER = 106;
    /** RegularExpression Id. */
    int DIGIT = 107;
    /** RegularExpression Id. */
    int LETTER = 108;
    /** RegularExpression Id. */
    int SEPARATOR = 109;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int IN_SINGLE_LINE_COMMENT = 1;
    /** Lexical state. */
    int IN_FORMAL_COMMENT = 2;
    /** Lexical state. */
    int IN_MULTI_LINE_COMMENT = 3;

    /** Literal token values. */
    String[] tokenImage =
    { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "\"//\"", "\";\"",
            "<token of kind 7>", "\"/*\"", "<SINGLE_LINE_COMMENT>", "\"*/\"",
            "\"*/\"", "<token of kind 12>", "\"(\"", "\")\"", "\"define\"",
            "\"domain\"", "\":requirements\"", "\":types\"", "\"either\"",
            "\":constants\"", "\":predicates\"", "\":functions\"",
            "\":action\"", "\":parameters\"", "\":precondition\"",
            "\":effect\"", "\"preference\"", "\"when\"", "\":durative-action\"",
            "\":duration\"", "\":condition\"", "\":derived\"", "\"problem\"",
            "\":domain\"", "\":objects\"", "\":init\"", "\":goal\"",
            "\":metric\"", "\":strips\"", "\":typing\"",
            "\":negative-preconditions\"", "\":disjunctive-preconditions\"",
            "\":equality\"", "\":existential-preconditions\"",
            "\":universal-preconditions\"", "\":quantified-preconditions\"",
            "\":conditional-effects\"", "\":action-costs\"", "\":fluents\"",
            "\":numeric-fluents\"", "\":object-fluents\"",
            "\":goal-utilities\"", "\":adl\"", "\":durative-actions\"",
            "\":derived-predicates\"", "\":timed-initial-literals\"",
            "\":preferences\"", "\":constraints\"", "\":continus-effects\"",
            "\":duration-inequalities\"", "\">\"", "\"<\"", "\">=\"", "\"<=\"",
            "\"=\"", "\"*\"", "\"/\"", "\"+\"", "\"-\"", "\"assign\"",
            "\"scale-up\"", "\"scale-down\"", "\"increase\"", "\"decrease\"",
            "\"or\"", "\"and\"", "\"imply\"", "\"not\"", "\"forall\"",
            "\"exists\"", "\"always\"", "\"sometime\"", "\"within\"",
            "\"at-most-once\"", "\"sometime-after\"", "\"sometime-before\"",
            "\"always-within\"", "\"hold-during\"", "\"hold-after\"", "\"at\"",
            "\"start\"", "\"end\"", "\"over\"", "\"all\"", "\"total-time\"",
            "\"total-cost\"", "\"maximize\"", "\"minimize\"", "\"is-violated\"",
            "\"?duration\"", "\"#t\"", "\"number\"", "\"object\"",
            "<VARIABLE_SYMBOL>", "<SYMBOL>", "<NUMBER>", "<DIGIT>", "<LETTER>",
            "<SEPARATOR>", };

}
