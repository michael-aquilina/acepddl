/* Generated By:JavaCC: Do not edit this line. PDDL21ParserTokenManager.java */
package mt.uol.smi.attempto.aceview.pddl.sapa.parsing;

import java.util.*;

import mt.uol.smi.attempto.aceview.pddl.ACEPlannerRunner;
import mt.uol.smi.attempto.aceview.pddl.IACEPlannerRunner;
import mt.uol.smi.attempto.aceview.pddl.sapa.basic_ds.*;

public class PDDL21ParserTokenManager implements PDDL21ParserConstants {
	public static java.io.PrintStream debugStream = System.out;

	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
		case 0:
			if ((active0 & 0x20000000L) != 0L)
				return 22;
			if ((active0 & 0x1e00000000000000L) != 0L)
				return 12;
			if ((active0 & 0x39f0001077fe00L) != 0L)
				return 32;
			if ((active0 & 0x60ff7cf800180L) != 0L) {
				jjmatchedKind = 63;
				return 25;
			}
			return -1;
		case 1:
			if ((active0 & 0x100010008000L) != 0L)
				return 82;
			if ((active0 & 0x60fd78f800180L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 1;
				return 25;
			}
			if ((active0 & 0x400000L) != 0L)
				return 90;
			if ((active0 & 0x10000000000000L) != 0L)
				return 31;
			if ((active0 & 0x4000L) != 0L)
				return 186;
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 1;
				return 23;
			}
			if ((active0 & 0x141000L) != 0L)
				return 177;
			if ((active0 & 0x2040000000L) != 0L)
				return 25;
			if ((active0 & 0x200L) != 0L)
				return 183;
			if ((active0 & 0x800L) != 0L)
				return 37;
			return -1;
		case 2:
			if ((active0 & 0x800L) != 0L)
				return 36;
			if ((active0 & 0x10008000L) != 0L)
				return 200;
			if ((active0 & 0x141000L) != 0L)
				return 176;
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 2;
				return 23;
			}
			if ((active0 & 0x60f828f800180L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 2;
				return 25;
			}
			if ((active0 & 0x5500000000L) != 0L)
				return 25;
			return -1;
		case 3:
			if ((active0 & 0x10008000L) != 0L)
				return 199;
			if ((active0 & 0x101000L) != 0L)
				return 175;
			if ((active0 & 0x800L) != 0L)
				return 35;
			if ((active0 & 0x10200000000L) != 0L)
				return 25;
			if ((active0 & 0x60e808f800180L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 3;
				return 25;
			}
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 3;
				return 23;
			}
			return -1;
		case 4:
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 4;
				return 23;
			}
			if ((active0 & 0x60e800f800180L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 4;
				return 25;
			}
			if ((active0 & 0x80000000L) != 0L)
				return 25;
			if ((active0 & 0x10008000L) != 0L)
				return 198;
			if ((active0 & 0x100000L) != 0L)
				return 174;
			return -1;
		case 5:
			if ((active0 & 0x10008000L) != 0L)
				return 197;
			if ((active0 & 0x100000L) != 0L)
				return 173;
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 5;
				return 23;
			}
			if ((active0 & 0x608000f000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 5;
				return 25;
			}
			if ((active0 & 0x68000800180L) != 0L)
				return 25;
			return -1;
		case 6:
			if ((active0 & 0x10008000L) != 0L)
				return 196;
			if ((active0 & 0x80000000000L) != 0L)
				return 25;
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 6;
				return 23;
			}
			if ((active0 & 0x600000f000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 6;
				return 25;
			}
			if ((active0 & 0x100000L) != 0L)
				return 172;
			return -1;
		case 7:
			if ((active0 & 0x2000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 7;
				return 25;
			}
			if ((active0 & 0x10000000L) != 0L)
				return 215;
			if ((active0 & 0x100000L) != 0L)
				return 171;
			if ((active0 & 0x8000L) != 0L)
				return 195;
			if ((active0 & 0x600000d000000L) != 0L)
				return 25;
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 7;
				return 23;
			}
			return -1;
		case 8:
			if ((active0 & 0x2000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 8;
				return 25;
			}
			if ((active0 & 0x20000000L) != 0L)
				return 23;
			if ((active0 & 0x10000000L) != 0L)
				return 214;
			if ((active0 & 0x100000L) != 0L)
				return 170;
			if ((active0 & 0x8000L) != 0L)
				return 194;
			return -1;
		case 9:
			if ((active0 & 0x8000L) != 0L)
				return 193;
			if ((active0 & 0x2000000L) != 0L)
				return 25;
			if ((active0 & 0x100000L) != 0L)
				return 169;
			return -1;
		case 10:
			if ((active0 & 0x8000L) != 0L)
				return 192;
			return -1;
		case 11:
			if ((active0 & 0x8000L) != 0L)
				return 191;
			return -1;
		case 12:
			if ((active0 & 0x8000L) != 0L)
				return 190;
			return -1;
		case 13:
			if ((active0 & 0x8000L) != 0L)
				return 189;
			return -1;
		case 14:
			if ((active0 & 0x8000L) != 0L)
				return 188;
			return -1;
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	static private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 35:
			return jjMoveStringLiteralDfa1_0(0x800000000L);
		case 40:
			return jjStopAtPos(0, 64);
		case 41:
			return jjStopAtPos(0, 65);
		case 42:
			return jjStartNfaWithStates_0(0, 59, 12);
		case 43:
			return jjStartNfaWithStates_0(0, 57, 12);
		case 45:
			return jjStartNfaWithStates_0(0, 58, 12);
		case 47:
			return jjStartNfaWithStates_0(0, 60, 12);
		case 58:
			return jjMoveStringLiteralDfa1_0(0x39f0001077fe00L);
		case 61:
			return jjStopAtPos(0, 56);
		case 63:
			return jjMoveStringLiteralDfa1_0(0x20000000L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa1_0(0x1440800000L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa1_0(0x8000180L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa1_0(0x60100000000L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa1_0(0x8000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa1_0(0x4000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa1_0(0x6000000000000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa1_0(0x4000000000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa1_0(0x2200000000L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa1_0(0x80000000000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa1_0(0x83000000L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa1_0(0x10000000000L);
		default:
			return jjMoveNfa_0(5, 0);
		}
	}

	static private final int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, 0L);
			return 1;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000000004000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa2_0(active0, 0x3141000L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa2_0(active0, 0x100030008000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x8400080L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa2_0(active0, 0x200L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x4840000000000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000400000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x1104000000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x20c000000100L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000222000L);
		case 82:
		case 114:
			if ((active0 & 0x2000000000L) != 0L)
				return jjStartNfaWithStates_0(1, 37, 25);
			return jjMoveStringLiteralDfa2_0(active0, 0x80000000400L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000800000L);
		case 84:
		case 116:
			if ((active0 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(1, 30, 25);
			else if ((active0 & 0x800000000L) != 0L)
				return jjStopAtPos(1, 35);
			return jjMoveStringLiteralDfa2_0(active0, 0x80000800L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa2_0(active0, 0x200010000L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, 0L);
			return 2;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000083030000L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa3_0(active0, 0xc004000L);
		case 68:
		case 100:
			if ((active0 & 0x100000000L) != 0L)
				return jjStartNfaWithStates_0(2, 32, 25);
			else if ((active0 & 0x1000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 36, 25);
			break;
		case 69:
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x19010200000400L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0x400080L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
		case 76:
		case 108:
			if ((active0 & 0x400000000L) != 0L)
				return jjStartNfaWithStates_0(2, 34, 25);
			break;
		case 77:
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0x100L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x4800000000000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x580000141000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000202000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
		case 84:
		case 116:
			if ((active0 & 0x4000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 38, 25);
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x30008200L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
		case 89:
		case 121:
			return jjMoveStringLiteralDfa3_0(active0, 0x800L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, 0L);
			return 3;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x408000000100L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa4_0(active0, 0x202000L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x6800000800080L);
		case 74:
		case 106:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa4_0(active0, 0x3000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
		case 78:
		case 110:
			if ((active0 & 0x10000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 40, 25);
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000101200L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa4_0(active0, 0x800L);
		case 81:
		case 113:
			return jjMoveStringLiteralDfa4_0(active0, 0x400L);
		case 82:
		case 114:
			if ((active0 & 0x200000000L) != 0L)
				return jjStartNfaWithStates_0(3, 33, 25);
			return jjMoveStringLiteralDfa4_0(active0, 0x300000bc038000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x20000040000L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000004000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, 0L);
			return 4;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa5_0(active0, 0x20100030028000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x200200L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa5_0(active0, 0x102000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa5_0(active0, 0x24000f400800L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000000800000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000000004100L);
		case 76:
		case 108:
			if ((active0 & 0x400000000000L) != 0L)
				return jjStopAtPos(4, 46);
			return jjMoveStringLiteralDfa5_0(active0, 0x88000000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0x80L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
		case 83:
		case 115:
			if ((active0 & 0x10000L) != 0L)
				return jjStopAtPos(4, 16);
			return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
		case 84:
		case 116:
			if ((active0 & 0x40000L) != 0L)
				return jjStopAtPos(4, 18);
			else if ((active0 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(4, 31, 25);
			else if ((active0 & 0x800000000000L) != 0L)
				return jjStopAtPos(4, 47);
			return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0x400L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, 0L);
			return 5;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa6_0(active0, 0x3000000L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000c000000L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa6_0(active0, 0x200000400000L);
		case 69:
		case 101:
			if ((active0 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(5, 7, 25);
			return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x7100000102400L);
		case 76:
		case 108:
			if ((active0 & 0x8000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 39, 25);
			return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
		case 78:
		case 110:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(5, 8, 25);
			else if ((active0 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(5, 23, 25);
			break;
		case 79:
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0x204000L);
		case 82:
		case 114:
			if ((active0 & 0x40000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 42, 25);
			break;
		case 83:
		case 115:
			if ((active0 & 0x800L) != 0L)
				return jjStopAtPos(5, 11);
			else if ((active0 & 0x20000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 41, 25);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000030009200L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, 0L);
			return 6;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
		case 67:
		case 99:
			if ((active0 & 0x1000000000000L) != 0L)
				return jjStopAtPos(6, 48);
			return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
		case 72:
		case 104:
			if ((active0 & 0x8000000000000L) != 0L)
				return jjStopAtPos(6, 51);
			break;
		case 73:
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x30008200L);
		case 76:
		case 108:
			if ((active0 & 0x10000000000000L) != 0L)
				return jjStopAtPos(6, 52);
			return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
		case 77:
		case 109:
			if ((active0 & 0x80000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 43, 25);
			break;
		case 78:
		case 110:
			if ((active0 & 0x4000L) != 0L)
				return jjStopAtPos(6, 14);
			else if ((active0 & 0x100000000000L) != 0L)
				return jjStopAtPos(6, 44);
			return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0x400L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa7_0(active0, 0xc000000L);
		case 84:
		case 116:
			if ((active0 & 0x400000L) != 0L)
				return jjStopAtPos(6, 22);
			return jjMoveStringLiteralDfa7_0(active0, 0x200000100000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
		case 90:
		case 122:
			return jjMoveStringLiteralDfa7_0(active0, 0x6000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, 0L);
			return 7;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
		case 69:
		case 101:
			if ((active0 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(7, 26, 25);
			else if ((active0 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(7, 27, 25);
			else if ((active0 & 0x2000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 49, 25);
			else if ((active0 & 0x4000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 50, 25);
			return jjMoveStringLiteralDfa8_0(active0, 0x20000000000400L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0x32000200L);
		case 80:
		case 112:
			if ((active0 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(7, 24, 25);
			break;
		case 83:
		case 115:
			if ((active0 & 0x200000000000L) != 0L)
				return jjStopAtPos(7, 45);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, 0L);
			return 8;
		}
		switch (curChar) {
		case 69:
		case 101:
			return jjMoveStringLiteralDfa9_0(active0, 0x28000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
		case 76:
		case 108:
			if ((active0 & 0x20000000000000L) != 0L)
				return jjStopAtPos(8, 53);
			break;
		case 77:
		case 109:
			return jjMoveStringLiteralDfa9_0(active0, 0x400L);
		case 78:
		case 110:
			if ((active0 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(8, 28, 214);
			else if ((active0 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(8, 29, 23);
			return jjMoveStringLiteralDfa9_0(active0, 0x200L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(7, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa10_0(active0, 0x2400L);
		case 78:
		case 110:
			if ((active0 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(9, 20, 169);
			else if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(9, 25, 25);
			break;
		case 82:
		case 114:
			return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
		case 83:
		case 115:
			if ((active0 & 0x200L) != 0L)
				return jjStopAtPos(9, 9);
			else if ((active0 & 0x1000L) != 0L)
				return jjStopAtPos(9, 12);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa11_0(active0, 0x400L);
		case 83:
		case 115:
			if ((active0 & 0x2000L) != 0L)
				return jjStopAtPos(10, 13);
			else if ((active0 & 0x20000L) != 0L)
				return jjStopAtPos(10, 17);
			break;
		default:
			break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, 0L);
			return 11;
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa12_0(active0, 0x400L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(10, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, 0L);
			return 12;
		}
		switch (curChar) {
		case 78:
		case 110:
			if ((active0 & 0x200000L) != 0L)
				return jjStopAtPos(12, 21);
			break;
		case 83:
		case 115:
			if ((active0 & 0x400L) != 0L)
				return jjStopAtPos(12, 10);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(11, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(11, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, 0L);
			return 13;
		}
		switch (curChar) {
		case 73:
		case 105:
			return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(12, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(12, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0, 0L);
			return 14;
		}
		switch (curChar) {
		case 79:
		case 111:
			return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(13, active0, 0L);
	}

	static private final int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(13, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0, 0L);
			return 15;
		}
		switch (curChar) {
		case 78:
		case 110:
			if ((active0 & 0x8000L) != 0L)
				return jjStartNfaWithStates_0(15, 15, 27);
			break;
		default:
			break;
		}
		return jjStartNfa_0(14, active0, 0L);
	}

	static private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	static private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	static private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 240;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 5:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(9, 10);
						else if ((0x7000000000000000L & l) != 0L) {
							if (kind > 61)
								kind = 61;
						} else if (curChar == 58)
							jjAddStates(0, 13);
						else if (curChar == 47)
							jjCheckNAdd(12);
						else if (curChar == 42)
							jjCheckNAdd(12);
						else if (curChar == 45)
							jjCheckNAdd(12);
						else if (curChar == 43)
							jjCheckNAdd(12);
						else if (curChar == 59)
							jjstateSet[jjnewStateCnt++] = 0;
						else if (curChar == 63)
							jjstateSet[jjnewStateCnt++] = 22;
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 54)
								kind = 54;
							jjCheckNAdd(8);
						} else if (curChar == 60)
							jjCheckNAdd(17);
						else if (curChar == 62)
							jjCheckNAdd(17);
						else if (curChar == 48) {
							if (kind > 54)
								kind = 54;
						}
						break;
					case 0:
						if (curChar == 59)
							jjCheckNAddStates(14, 16);
						break;
					case 1:
						if ((0xffffffffffffdbffL & l) != 0L)
							jjCheckNAddStates(14, 16);
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 6)
							kind = 6;
						break;
					case 3:
						if (curChar == 10 && kind > 6)
							kind = 6;
						break;
					case 4:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 6:
						if (curChar == 48 && kind > 54)
							kind = 54;
						break;
					case 7:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAdd(8);
						break;
					case 8:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAdd(8);
						break;
					case 9:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(9, 10);
						break;
					case 10:
						if (curChar == 46)
							jjCheckNAdd(11);
						break;
					case 11:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAdd(11);
						break;
					case 12:
						if (curChar == 61 && kind > 55)
							kind = 55;
						break;
					case 13:
						if (curChar == 43)
							jjCheckNAdd(12);
						break;
					case 14:
						if (curChar == 45)
							jjCheckNAdd(12);
						break;
					case 15:
						if (curChar == 42)
							jjCheckNAdd(12);
						break;
					case 16:
						if (curChar == 47)
							jjCheckNAdd(12);
						break;
					case 17:
						if (curChar == 61 && kind > 61)
							kind = 61;
						break;
					case 18:
						if (curChar == 62)
							jjCheckNAdd(17);
						break;
					case 19:
						if (curChar == 60)
							jjCheckNAdd(17);
						break;
					case 20:
						if ((0x7000000000000000L & l) != 0L && kind > 61)
							kind = 61;
						break;
					case 21:
						if (curChar == 63)
							jjstateSet[jjnewStateCnt++] = 22;
						break;
					case 23:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 25:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 63)
							kind = 63;
						jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 26:
						if (curChar == 58)
							jjAddStates(0, 13);
						break;
					case 51:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 50;
						break;
					case 72:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 71;
						break;
					case 104:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 103;
						break;
					case 128:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 127;
						break;
					case 150:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 149;
						break;
					case 167:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 166;
						break;
					case 194:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 193;
						break;
					case 214:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 213;
						break;
					case 229:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 228;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 197:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 216;
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 196;
						break;
					case 82:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 220;
						else if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 81;
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 200;
						break;
					case 32:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 238;
						else if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 221;
						else if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 186;
						else if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 183;
						else if ((0x2000000020000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 159;
						else if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 136;
						else if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 114;
						else if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 58;
						else if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 37;
						else if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 31;
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 201;
						else if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 177;
						else if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 90;
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 90:
						if ((0x100000001000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 113;
						else if ((0x2000000020000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 89;
						break;
					case 200:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 219;
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 199;
						break;
					case 198:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 217;
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 197;
						break;
					case 175:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 235;
						else if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 174;
						break;
					case 199:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 218;
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 198;
						break;
					case 176:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 236;
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 175;
						break;
					case 5:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 63)
							kind = 63;
						jjCheckNAdd(25);
						break;
					case 196:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 215;
						else if ((0x40000000400000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 195;
						break;
					case 177:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 237;
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 176;
						break;
					case 1:
						jjAddStates(14, 16);
						break;
					case 22:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjCheckNAdd(23);
						break;
					case 23:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjCheckNAdd(23);
						break;
					case 25:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 63)
							kind = 63;
						jjCheckNAdd(25);
						break;
					case 27:
						if ((0x8000000080000L & l) != 0L && kind > 19)
							kind = 19;
						break;
					case 28:
						if ((0x1000000010000L & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 29:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 28;
						break;
					case 30:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 29;
						break;
					case 31:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 30;
						break;
					case 33:
						if ((0x8000000080L & l) != 0L && kind > 19)
							kind = 19;
						break;
					case 34:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 35:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 34;
						break;
					case 36:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 37:
						if ((0x200000002000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 36;
						break;
					case 38:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 37;
						break;
					case 39:
					case 60:
					case 92:
					case 116:
					case 138:
					case 188:
						if ((0x400000004000L & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 40:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 39;
						break;
					case 41:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 40;
						break;
					case 42:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 41;
						break;
					case 43:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 42;
						break;
					case 44:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 43;
						break;
					case 45:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 46:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 45;
						break;
					case 47:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 46;
						break;
					case 48:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 47;
						break;
					case 49:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 48;
						break;
					case 50:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 49;
						break;
					case 52:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 51;
						break;
					case 53:
						if ((0x40000000400000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 53;
						break;
					case 55:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 54;
						break;
					case 56:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 55;
						break;
					case 57:
						if ((0x8000000080L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 58:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 57;
						break;
					case 59:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 58;
						break;
					case 61:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 60;
						break;
					case 62:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 61;
						break;
					case 63:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 62;
						break;
					case 64:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 63;
						break;
					case 65:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 64;
						break;
					case 66:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 65;
						break;
					case 67:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 66;
						break;
					case 68:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 68;
						break;
					case 70:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 69;
						break;
					case 71:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 70;
						break;
					case 73:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 72;
						break;
					case 74:
						if ((0x40000000400000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 73;
						break;
					case 75:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 74;
						break;
					case 76:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 75;
						break;
					case 77:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 76;
						break;
					case 78:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 77;
						break;
					case 79:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 80:
						if ((0x40000000400L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 79;
						break;
					case 81:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 83:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 84:
						if ((0x200000002000000L & l) != 0L && kind > 19)
							kind = 19;
						break;
					case 85:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 84;
						break;
					case 86:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 87:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 88:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 87;
						break;
					case 89:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 88;
						break;
					case 91:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 90;
						break;
					case 93:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 92;
						break;
					case 94:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 93;
						break;
					case 95:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 94;
						break;
					case 96:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 95;
						break;
					case 97:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 96;
						break;
					case 98:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 97;
						break;
					case 99:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 98;
						break;
					case 100:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 99;
						break;
					case 101:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 100;
						break;
					case 102:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 101;
						break;
					case 103:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 102;
						break;
					case 105:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 104;
						break;
					case 106:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 105;
						break;
					case 107:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 106;
						break;
					case 108:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 107;
						break;
					case 109:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 108;
						break;
					case 110:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 109;
						break;
					case 111:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 110;
						break;
					case 112:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 111;
						break;
					case 113:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 112;
						break;
					case 114:
						if ((0x100000001000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 113;
						break;
					case 115:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 114;
						break;
					case 117:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 116;
						break;
					case 118:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 117;
						break;
					case 119:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 118;
						break;
					case 120:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 119;
						break;
					case 121:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 120;
						break;
					case 122:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 121;
						break;
					case 123:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 122;
						break;
					case 124:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 123;
						break;
					case 125:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 124;
						break;
					case 126:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 125;
						break;
					case 127:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 126;
						break;
					case 129:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 128;
						break;
					case 130:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 129;
						break;
					case 131:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 130;
						break;
					case 132:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 131;
						break;
					case 133:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 132;
						break;
					case 134:
						if ((0x40000000400000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 133;
						break;
					case 135:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 134;
						break;
					case 136:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 135;
						break;
					case 137:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 136;
						break;
					case 139:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 138;
						break;
					case 140:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 139;
						break;
					case 141:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 140;
						break;
					case 142:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 141;
						break;
					case 143:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 142;
						break;
					case 144:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 143;
						break;
					case 145:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 144;
						break;
					case 146:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 145;
						break;
					case 147:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 146;
						break;
					case 148:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 147;
						break;
					case 149:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 148;
						break;
					case 151:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 150;
						break;
					case 152:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 151;
						break;
					case 153:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 152;
						break;
					case 154:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 153;
						break;
					case 155:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 154;
						break;
					case 156:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 155;
						break;
					case 157:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 156;
						break;
					case 158:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 157;
						break;
					case 159:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 158;
						break;
					case 160:
						if ((0x2000000020000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 159;
						break;
					case 161:
					case 179:
					case 223:
						if ((0x10000000100000L & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 162:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 161;
						break;
					case 163:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 162;
						break;
					case 164:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 163;
						break;
					case 165:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 164;
						break;
					case 166:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 165;
						break;
					case 168:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 167;
						break;
					case 169:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 168;
						break;
					case 170:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 169;
						break;
					case 171:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 170;
						break;
					case 172:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 171;
						break;
					case 173:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 172;
						break;
					case 174:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 173;
						break;
					case 178:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 177;
						break;
					case 180:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 179;
						break;
					case 181:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 180;
						break;
					case 182:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 181;
						break;
					case 183:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 182;
						break;
					case 184:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 183;
						break;
					case 185:
						if ((0x100000001000L & l) != 0L && kind > 19)
							kind = 19;
						break;
					case 186:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 185;
						break;
					case 187:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 186;
						break;
					case 189:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 188;
						break;
					case 190:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 189;
						break;
					case 191:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 190;
						break;
					case 192:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 191;
						break;
					case 193:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 192;
						break;
					case 195:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 194;
						break;
					case 201:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 200;
						break;
					case 202:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 201;
						break;
					case 203:
						if ((0x2000000020L & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 204:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 203;
						break;
					case 205:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 204;
						break;
					case 206:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 205;
						break;
					case 207:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 206;
						break;
					case 208:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 207;
						break;
					case 209:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 208;
						break;
					case 210:
						if ((0x2000000020000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 209;
						break;
					case 211:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 210;
						break;
					case 212:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 211;
						break;
					case 213:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 212;
						break;
					case 215:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 214;
						break;
					case 216:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 215;
						break;
					case 217:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 216;
						break;
					case 218:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 217;
						break;
					case 219:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 218;
						break;
					case 220:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 219;
						break;
					case 221:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 220;
						break;
					case 222:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 221;
						break;
					case 224:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 223;
						break;
					case 225:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 224;
						break;
					case 226:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 225;
						break;
					case 227:
						if ((0x4000000040L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 226;
						break;
					case 228:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 227;
						break;
					case 230:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 229;
						break;
					case 231:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 230;
						break;
					case 232:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 231;
						break;
					case 233:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 232;
						break;
					case 234:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 233;
						break;
					case 235:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 234;
						break;
					case 236:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 235;
						break;
					case 237:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 236;
						break;
					case 238:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 237;
						break;
					case 239:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 238;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 1:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(14, 16);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 240 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 32, 38, 59, 83, 91, 115, 137, 160, 178, 184, 187, 202, 222, 239, 1, 2, 4, };
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, "\75", "\53", "\55", "\52", "\57", null, null, null,
			"\50", "\51", };
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xffffffffffffff81L, 0x3L, };
	static final long[] jjtoSkip = { 0x7eL, 0x0L, };
	static final long[] jjtoSpecial = { 0x40L, 0x0L, };
	static protected SimpleCharStream input_stream;
	static private IACEPlannerRunner ace_pddl_runner;
	static private final int[] jjrounds = new int[240];
	static private final int[] jjstateSet = new int[480];
	static protected char curChar;

	public PDDL21ParserTokenManager(SimpleCharStream stream) {
		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);
		input_stream = stream;
	}

	public PDDL21ParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}
	
	static public void ReInit(IACEPlannerRunner runner) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		ace_pddl_runner = runner;
		ReInitRounds();
	}

	static private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 240; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	static protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	public static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				} else {
					if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (specialToken == null)
							specialToken = matchedToken;
						else {
							matchedToken.specialToken = specialToken;
							specialToken = (specialToken.next = matchedToken);
						}
					}
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

}
