/* Generated By:JavaCC: Do not edit this line. PDDL21Parser.java */
package mt.uol.smi.attempto.aceview.planner.sapa.parsing;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import mt.uol.smi.attempto.aceview.planner.IACEPlannerRunner;
import mt.uol.smi.attempto.aceview.planner.model.ACEPlannerActionListModel;
import mt.uol.smi.attempto.aceview.planner.model.ACEPlannerModel;
import mt.uol.smi.attempto.aceview.planner.model.ACEPlannerSnippet;
import mt.uol.smi.attempto.aceview.planner.sapa.complex_ds.ACEPlannerStateManager;

public class ACEPlannerParser {

	static private ACEPlannerModel model;
	private static final Logger logger = Logger.getLogger(ACEPlannerParser.class);

	public ACEPlannerParser(ACEPlannerModel runner) {
		model = runner;
	}

	/*******************************************************************/
	final public ACEPlannerDomain parse_domain_pddl() {
		logger.debug("Parsing domain...");
		ACEPlannerDomain aDomain = new ACEPlannerDomain();
		String s;
		int i;
		s = DomainName();
		aDomain.setName(s);
		aDomain.setActions(model.getActionListModel());
		logger.debug("There are actions : " + aDomain.getActions().getList().size());
		return aDomain;
	}

	/******/
	final public String DomainName() {
		String name = model.getName();
		if (name != null)
			return name.toLowerCase();
		throw new Error("name is null function");
	}

	/*******/
	final public ACEPlannerActionListModel ActionList() {
		return model.getActionListModel();
	}

	/****************************************************************
	 * Finish Parsing DOMAIN. -->> Start Parsing Problem.....
	 ****************************************************************/
	final public ACEPlannerProblem parse_problem_pddl() {
		logger.debug("Parsing problem...");
		ACEPlannerProblem prob = new ACEPlannerProblem();
		String s;
		s = ProblemName();
		prob.setName(s);
		prob.setDomain(DomainName());
		
		logger.debug("Parsing goal...");
		for (ACEPlannerSnippet snippet : model.getGoal().getSnippets()) {
			logger.debug("Adding goal state snippet : " + snippet.getSentence());
			prob.getGoalState().addSnippet(snippet);
		}

		logger.debug("Parsing problem...");
		for (ACEPlannerSnippet snippet : model.getProblem().getSnippets()) {
			logger.debug("Adding problem state snippet : " + snippet.getSentence());
			prob.getInitState().addSnippet(snippet);
		}

		return prob;
	}

	/******/
	static final public String ProblemName() {
		return "generic problem name";
	}

}
