/* Generated By:JavaCC: Do not edit this line. PDDL21Parser.java */
package edu.asu.sapa.parsing;

import edu.asu.sapa.basic_ds.*;

import java.util.*;

public class PDDL21Parser implements PDDL21ParserConstants {
	public static void main(String args[]) {
		PDDL21Parser parser = new PDDL21Parser(System.in);
		java.io.FileInputStream pddl_file;
		Domain my_domain = new Domain();
		Problem my_problem = new Problem();

		/*
		 * Instantiate a parser
		 */
		if (args.length == 0) {
			System.out.println("PDDL2.1 Parser Version1.0: " + "Reading from standard input!!");
		} else if (args.length > 2) {
			System.out.println("PDDL2.1 Parser Version1.0!!");
			System.out.println("Usage: java PDDL21Parser domain.pddl [problem.pddl]");
			return;
		} else {
			/*** Parse the Domain specification file ****/
			try {
				pddl_file = new java.io.FileInputStream(args[0]);
				parser.ReInit(pddl_file);
			} catch (java.io.FileNotFoundException e) {
				System.out.println("File " + args[0] + " not found !!!");
				return;
			}
		}

		/*
		 * Try to parse the input file
		 */
		try {
			my_domain = parser.parse_domain_pddl();
			System.out.println("Domain file parsed Succesfully !!");
		} catch (ParseException e) {
			System.out.println("Exception while parsing !!");
		}

		/**** Parse the problem file ****/
		if (args.length == 2) {
			try {
				pddl_file = new java.io.FileInputStream(args[1]);
				parser.ReInit(pddl_file);
			} catch (java.io.FileNotFoundException e) {
				System.out.println("File " + args[1] + " not found !!!");
				return;
			}

			try {
				my_problem = parser.parse_problem_pddl();
				System.out.println("Problem parsed Succesfully !!");
			} catch (ParseException e) {
				System.out.println("Exception while parsing problem file!!");
			}
		}

		/****** Check if we parse the domain correctly *******/
		System.out.println("*****************************");
		System.out.println("Name: " + my_domain.getName());
		System.out.print("Requirements: ");
		int i;
		for (i = 0; i < my_domain.numReq(); i++)
			System.out.print((String) my_domain.getReq(i) + " ");

		/********/
		System.out.print("\nTypes: ");
		for (i = 0; i < my_domain.numType(); i++) {
			Object obj = my_domain.getType(i);
			System.out.print((String) obj + "->" + my_domain.getParent((String) obj) + " ");
		}

		/********/
		System.out.print("\nPredicates: ");
		for (i = 0; i < my_domain.numPred(); i++)
			System.out.print(my_domain.getPred(i) + " ");

		System.out.print("\nFunctions: ");
		for (i = 0; i < my_domain.numFunction(); i++)
			System.out.print(my_domain.getFunction(i) + " ");

		try {
			System.in.read();
			System.in.read();
		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println("\nActions: ");
		for (i = 0; i < my_domain.numAction(); i++) {
			System.out.print(my_domain.getAction(i) + " ");
			try {
				System.in.read();
				System.in.read();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		/**** Check if the problem is parsed correctly ****/
		System.out.println("\n********* Problem Specification *****");
		System.out.print(my_problem.toString());
	}

	/*******************************************************************/
	static final public Domain parse_domain_pddl() throws ParseException {
		Domain aDomain = new Domain();
		String s;
		ArrayList aArrayList = new ArrayList(10);
		int i;
		boolean type_declaration = false;
		ArrayList v = new ArrayList();
		ArrayList value = new ArrayList();
		Token t;
		s = DomainName();
		aDomain.setName(s);
		aArrayList = Requirements();
		for (i = 0; i < aArrayList.size(); i++) {
			aDomain.putReq(aArrayList.get(i));
		}
		if (jj_2_4(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(TYPES);
			v.clear();
			label_1: while (true) {
				label_2: while (true) {
					t = jj_consume_token(NAME);
					v.add(t.image.toLowerCase());
					if (jj_2_1(3)) {
						;
					} else {
						break label_2;
					}
				}
				if (jj_2_2(3)) {
					jj_consume_token(MINUS);
					t = jj_consume_token(NAME);
					aDomain.putTypeMap(v, t.image.toLowerCase());
					v.clear();
				} else {
					;
				}
				if (jj_2_3(3)) {
					;
				} else {
					break label_1;
				}
			}
			jj_consume_token(CLOSEBRACE);
			type_declaration = true;
		} else {
			;
		}
		aDomain.setDomainType(type_declaration); /* Domain is typed or not */

		if (jj_2_8(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(CONSTANTS);
			v.clear();
			label_3: while (true) {
				label_4: while (true) {
					t = jj_consume_token(NAME);
					v.add(t.image.toLowerCase());
					if (jj_2_5(3)) {
						;
					} else {
						break label_4;
					}
				}
				if (jj_2_6(3)) {
					jj_consume_token(MINUS);
					t = jj_consume_token(NAME);
					aDomain.putConstants(v, t.image.toLowerCase());
					v.clear();
				} else {
					;
				}
				if (jj_2_7(3)) {
					;
				} else {
					break label_3;
				}
			}
			jj_consume_token(CLOSEBRACE);
			if (!type_declaration)
				aDomain.putConstants(v, "basic_type");
		} else {
			;
		}
		/***** For predicates *****/
		aArrayList = PredicateList();
		for (i = 0; i < aArrayList.size(); i++) {
			aDomain.putPred((Predicate) aArrayList.get(i));
		}
		if (jj_2_9(3)) {
			aArrayList = FunctionList();
			for (i = 0; i < aArrayList.size(); i++) {
				aDomain.putFunction((Function) aArrayList.get(i));
			}
		} else {
			;
		}
		/*******/
		aArrayList = ActionList();
		for (i = 0; i < aArrayList.size(); i++) {
			aDomain.putAction((Action) aArrayList.get(i));
		}
		if (jj_2_10(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		jj_consume_token(0);
		{
			if (true)
				return aDomain;
		}
		throw new Error("Missing return statement in function");
	}

	/******/
	static final public String DomainName() throws ParseException {
		Token t;
		jj_consume_token(OPENBRACE);
		jj_consume_token(DEFINE);
		jj_consume_token(OPENBRACE);
		jj_consume_token(DOMAIN);
		t = jj_consume_token(NAME);
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return t.image.toLowerCase();
		}
		throw new Error("Missing return statement in function");
	}

	/******/
	static final public ArrayList Requirements() throws ParseException {
		Token t;
		ArrayList v = new ArrayList(10);
		jj_consume_token(OPENBRACE);
		jj_consume_token(REQUIREMENTS);
		label_5: while (true) {
			t = jj_consume_token(REQUIREMENT);
			v.add(t.image.toLowerCase());
			if (jj_2_11(3)) {
				;
			} else {
				break label_5;
			}
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	/*******/
	static final public ArrayList PredicateList() throws ParseException {
		Token t;
		ArrayList v = new ArrayList(10);
		Predicate s;
		jj_consume_token(OPENBRACE);
		jj_consume_token(PREDICATES);
		label_6: while (true) {
			s = DeclarePred();
			v.add(s);
			if (jj_2_12(3)) {
				;
			} else {
				break label_6;
			}
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Modified for PDDL2.1. May need to consult more examples ****/
	/*** Predicate type declaration at the top of the domain file ***/
	static final public Predicate DeclarePred() throws ParseException {
		Token t;
		Predicate p = new Predicate();
		int count = 0;
		String combineName = new String();
		boolean isTyped = false;
		jj_consume_token(OPENBRACE);
		if (jj_2_13(3)) {
			t = jj_consume_token(NAME);
		} else if (jj_2_14(3)) {
			t = jj_consume_token(AT);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		p.setName(t.image.toLowerCase());
		label_7: while (true) {
			if (jj_2_15(3)) {
				;
			} else {
				break label_7;
			}
			label_8: while (true) {
				t = jj_consume_token(VAR);
				count++;
				if (jj_2_16(3)) {
					;
				} else {
					break label_8;
				}
			}
			if (jj_2_20(3)) {
				jj_consume_token(MINUS);
				isTyped = true; /* The domain is "typed" */

				if (jj_2_18(3)) {
					t = jj_consume_token(NAME);
					p.addObj(t.image.toLowerCase(), count);
					count = 0;
				} else if (jj_2_19(3)) {
					jj_consume_token(OPENBRACE);
					jj_consume_token(EITHER);
					label_9: while (true) {
						t = jj_consume_token(NAME);
						combineName += t.image.toLowerCase() + "*";
						if (jj_2_17(3)) {
							;
						} else {
							break label_9;
						}
					}
					jj_consume_token(CLOSEBRACE);
					p.addObj(combineName, count);
					count = 0;
					combineName = new String();
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			} else {
				;
			}
		}
		jj_consume_token(CLOSEBRACE);
		if (!isTyped)
			p.addObj("basic_type", count);

		{
			if (true)
				return p;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Predicate declaration inside action declaration in the domain file ***/
	static final public Predicate ActionPred() throws ParseException {
		Token t;
		Predicate p = new Predicate();
		jj_consume_token(OPENBRACE);
		if (jj_2_21(3)) {
			t = jj_consume_token(NAME);
		} else if (jj_2_22(3)) {
			t = jj_consume_token(AT);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		p.setName(t.image.toLowerCase());
		label_10: while (true) {
			if (jj_2_23(3)) {
				;
			} else {
				break label_10;
			}
			if (jj_2_24(3)) {
				t = jj_consume_token(VAR);
			} else if (jj_2_25(3)) {
				t = jj_consume_token(NAME);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			p.addObj(t.image.toLowerCase(), 1);
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return p;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Predicate instance declaration in the problem file ***/
	static final public Predicate ProbPred() throws ParseException {
		Token t;
		Predicate p = new Predicate();
		jj_consume_token(OPENBRACE);
		if (jj_2_26(3)) {
			t = jj_consume_token(NAME);
		} else if (jj_2_27(3)) {
			t = jj_consume_token(AT);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		p.setName(t.image.toLowerCase());
		label_11: while (true) {
			if (jj_2_28(3)) {
				;
			} else {
				break label_11;
			}
			t = jj_consume_token(NAME);
			p.addObj(t.image.toLowerCase(), 1);
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return p;
		}
		throw new Error("Missing return statement in function");
	}

	/*******/
	static final public ArrayList FunctionList() throws ParseException {
		Token t;
		ArrayList v = new ArrayList(10);
		Function s;
		jj_consume_token(OPENBRACE);
		jj_consume_token(FUNCTION);
		label_12: while (true) {
			s = DeclareFunc();
			v.add(s);
			if (jj_2_29(3)) {
				;
			} else {
				break label_12;
			}
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	/** For Functions ***/
	/*** Function declaration at the top of the domain file ***/
	static final public Function DeclareFunc() throws ParseException {
		Token t;
		Function funct = new Function();
		int count = 0;
		if (jj_2_32(3)) {
			jj_consume_token(OPENBRACE);
			t = jj_consume_token(NAME);
			funct.setName(t.image.toLowerCase());
			label_13: while (true) {
				if (jj_2_30(3)) {
					;
				} else {
					break label_13;
				}
				label_14: while (true) {
					t = jj_consume_token(VAR);
					count++;
					if (jj_2_31(3)) {
						;
					} else {
						break label_14;
					}
				}
				jj_consume_token(MINUS);
				t = jj_consume_token(NAME);
				funct.addObj(t.image.toLowerCase(), count);
				count = 0;
			}
			jj_consume_token(CLOSEBRACE);
		} else if (jj_2_33(3)) {
			t = jj_consume_token(NAME);
			funct.setName(t.image.toLowerCase());
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return funct;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Function declaration inside the action's body (Test/Set) ***/
	static final public Function ActionFunc() throws ParseException {
		Token t;
		Function p = new Function();
		if (jj_2_35(3)) {
			jj_consume_token(OPENBRACE);
			t = jj_consume_token(NAME);
			p.setName(t.image.toLowerCase());
			label_15: while (true) {
				if (jj_2_34(3)) {
					;
				} else {
					break label_15;
				}
				t = jj_consume_token(VAR);
				p.addObj(t.image.toLowerCase());
			}
			jj_consume_token(CLOSEBRACE);
		} else if (jj_2_36(3)) {
			t = jj_consume_token(NAME);
			p.setName(t.image);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return p;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Function instance declarations in the problem file ***/
	static final public Function ProbFunc() throws ParseException {
		Token t;
		Function p = new Function();
		if (jj_2_38(3)) {
			jj_consume_token(OPENBRACE);
			t = jj_consume_token(NAME);
			p.setName(t.image.toLowerCase());
			label_16: while (true) {
				if (jj_2_37(3)) {
					;
				} else {
					break label_16;
				}
				t = jj_consume_token(NAME);
				p.addObj(t.image.toLowerCase());
			}
			jj_consume_token(CLOSEBRACE);
		} else if (jj_2_39(3)) {
			t = jj_consume_token(NAME);
			p.setName(t.image);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return p;
		}
		throw new Error("Missing return statement in function");
	}

	/*******/
	static final public ArrayList ActionList() throws ParseException {
		ArrayList v = new ArrayList();
		Action a;
		label_17: while (true) {
			a = Act();
			v.add(a);
			if (jj_2_40(3)) {
				;
			} else {
				break label_17;
			}
		}
		{
			if (true)
				return v;
		}
		throw new Error("Missing return statement in function");
	}

	/*******/
	static final public Action Act() throws ParseException {
		Token t;
		Action act = new Action();
		jj_consume_token(OPENBRACE);
		if (jj_2_41(3)) {
			jj_consume_token(ACTION);
			act = InstantAct();
		} else if (jj_2_42(3)) {
			jj_consume_token(DURATIVE_ACTION);
			act = DurativeAct();
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return act;
		}
		throw new Error("Missing return statement in function");
	}

	/*******/
	static final public Action DurativeAct() throws ParseException {
		Token t;
		Action act = new Action();
		MathForm m;
		ArrayList paraSet = new ArrayList();
		Predicate p;
		Test te;
		MySet se;
		Integer time;

		boolean isTyped = false;
		t = jj_consume_token(NAME);
		act.setName(t.image);
		jj_consume_token(PARAMETERS);
		jj_consume_token(OPENBRACE);
		label_18: while (true) {
			if (jj_2_43(3)) {
				;
			} else {
				break label_18;
			}
			label_19: while (true) {
				t = jj_consume_token(VAR);
				paraSet.add(t.image.toLowerCase());
				if (jj_2_44(3)) {
					;
				} else {
					break label_19;
				}
			}
			if (jj_2_45(3)) {
				jj_consume_token(MINUS);
				isTyped = true;
				t = jj_consume_token(NAME);
				act.putPara(paraSet, t.image.toLowerCase());
				paraSet.clear();
			} else {
				;
			}
		}
		jj_consume_token(CLOSEBRACE);
		if (!isTyped)
			act.putPara(paraSet, "basic_type");
		jj_consume_token(DURATION);
		jj_consume_token(OPENBRACE);
		jj_consume_token(EQUAL);
		jj_consume_token(DURATION_VAR);
		if (jj_2_46(3)) {
			t = jj_consume_token(A_NUMBER);
			act.setDType(true);
			act.setDStatic((new Float(t.image)).floatValue());
		} else if (jj_2_47(3)) {
			m = getMathForm();
			act.setDType(false);
			act.setDDynamic(m);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		jj_consume_token(CLOSEBRACE);
		if (jj_2_50(3)) {
			jj_consume_token(COST);
			if (jj_2_48(3)) {
				t = jj_consume_token(A_NUMBER);
				act.setCType(true);
				act.setCStatic((new Float(t.image)).floatValue());
			} else if (jj_2_49(3)) {
				m = getMathForm();
				act.setCType(false);
				act.setCDynamic(m);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} else {
			;
		}
		jj_consume_token(CONDITION);
		if (jj_2_51(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AND);
		} else {
			;
		}
		label_20: while (true) {
			if (jj_2_52(3)) {
				;
			} else {
				break label_20;
			}
			jj_consume_token(OPENBRACE);
			if (jj_2_53(3)) {
				jj_consume_token(AT);
				jj_consume_token(START);
				time = new Integer(0);
			} else if (jj_2_54(3)) {
				jj_consume_token(OVER);
				jj_consume_token(ALL);
				time = new Integer(1);
			} else if (jj_2_55(3)) {
				jj_consume_token(AT);
				jj_consume_token(END);
				time = new Integer(2);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			if (jj_2_58(3)) {
				if (jj_2_56(3)) {
					jj_consume_token(OPENBRACE);
				} else {
					;
				}
				te = getTest();
				act.putTest(te, time);
				if (jj_2_57(3)) {
					jj_consume_token(CLOSEBRACE);
				} else {
					;
				}
			} else if (jj_2_59(3)) {
				p = ActionPred();
				act.putPrecond(p, time);
			} else if (jj_2_60(3)) {
				ObjEqualityCheck();

			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			if (jj_2_61(3)) {
				jj_consume_token(CLOSEBRACE);
			} else {
				;
			}
		}
		if (jj_2_62(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		jj_consume_token(EFFECT);
		if (jj_2_63(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AND);
		} else {
			;
		}
		label_21: while (true) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AT);
			if (jj_2_64(3)) {
				jj_consume_token(START);
				time = new Integer(0);
			} else if (jj_2_65(3)) {
				jj_consume_token(END);
				time = new Integer(1);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			if (jj_2_68(3)) {
				if (jj_2_66(3)) {
					jj_consume_token(OPENBRACE);
				} else {
					;
				}
				se = getSet();
				act.putSet(se);
				act.putSetTimeEffect(time);
				if (jj_2_67(3)) {
					jj_consume_token(CLOSEBRACE);
				} else {
					;
				}
			} else if (jj_2_69(3)) {
				jj_consume_token(OPENBRACE);
				jj_consume_token(NOT);
				p = ActionPred();
				act.putDelete(p);
				act.putDeleteTimeEffect(time);
				jj_consume_token(CLOSEBRACE);
			} else if (jj_2_70(3)) {
				p = ActionPred();
				act.putAdd(p);
				act.putAddTimeEffect(time);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			if (jj_2_71(3)) {
				jj_consume_token(CLOSEBRACE);
			} else {
				;
			}
			if (jj_2_72(3)) {
				;
			} else {
				break label_21;
			}
		}
		jj_consume_token(CLOSEBRACE);
		if (jj_2_73(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		{
			if (true)
				return act;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Instantaneous Actions **/
	static final public Action InstantAct() throws ParseException {
		Token t;
		Action act = new Action();
		MathForm m;
		ArrayList paraSet = new ArrayList();
		Predicate p;
		Test te;
		MySet se;
		Integer time;

		boolean isTyped = false;
		t = jj_consume_token(NAME);
		act.setDType(true);
		act.setDStatic(0);
		act.setName(t.image);
		jj_consume_token(PARAMETERS);
		jj_consume_token(OPENBRACE);
		label_22: while (true) {
			if (jj_2_74(3)) {
				;
			} else {
				break label_22;
			}
			label_23: while (true) {
				t = jj_consume_token(VAR);
				paraSet.add(t.image.toLowerCase());
				if (jj_2_75(3)) {
					;
				} else {
					break label_23;
				}
			}
			if (jj_2_76(3)) {
				jj_consume_token(MINUS);
				isTyped = true;
				t = jj_consume_token(NAME);
				act.putPara(paraSet, t.image.toLowerCase());
				paraSet.clear();
			} else {
				;
			}
		}
		jj_consume_token(CLOSEBRACE);
		if (!isTyped)
			act.putPara(paraSet, "basic_type");
		if (jj_2_79(3)) {
			jj_consume_token(COST);
			if (jj_2_77(3)) {
				t = jj_consume_token(A_NUMBER);
				act.setCType(true);
				act.setCStatic((new Float(t.image)).floatValue());
			} else if (jj_2_78(3)) {
				m = getMathForm();
				act.setCType(false);
				act.setCDynamic(m);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} else {
			;
		}
		jj_consume_token(PRECONDITION);
		time = new Integer(0);
		if (jj_2_80(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AND);
		} else {
			;
		}
		label_24: while (true) {
			if (jj_2_81(3)) {
				;
			} else {
				break label_24;
			}
			if (jj_2_84(3)) {
				if (jj_2_82(3)) {
					jj_consume_token(OPENBRACE);
				} else {
					;
				}
				te = getTest();
				act.putTest(te, time);
				if (jj_2_83(3)) {
					jj_consume_token(CLOSEBRACE);
				} else {
					;
				}
			} else if (jj_2_85(3)) {
				p = ActionPred();
				act.putPrecond(p, time);
			} else if (jj_2_86(3)) {
				ObjEqualityCheck();

			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		if (jj_2_87(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		jj_consume_token(EFFECT);
		if (jj_2_88(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AND);
		} else {
			;
		}
		time = new Integer(0); /** Default for instantaneous actions */

		label_25: while (true) {
			if (jj_2_91(3)) {
				if (jj_2_89(3)) {
					jj_consume_token(OPENBRACE);
				} else {
					;
				}
				se = getSet();
				act.putSet(se);
				act.putSetTimeEffect(time);
				if (jj_2_90(3)) {
					jj_consume_token(CLOSEBRACE);
				} else {
					;
				}
			} else if (jj_2_92(3)) {
				jj_consume_token(OPENBRACE);
				jj_consume_token(NOT);
				p = ActionPred();
				act.putDelete(p);
				act.putDeleteTimeEffect(time);
				jj_consume_token(CLOSEBRACE);
			} else if (jj_2_93(3)) {
				p = ActionPred();
				act.putAdd(p);
				act.putAddTimeEffect(time);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			if (jj_2_94(3)) {
				;
			} else {
				break label_25;
			}
		}
		if (jj_2_95(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		if (jj_2_96(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		{
			if (true)
				return act;
		}
		throw new Error("Missing return statement in function");
	}

	/*** NOTE: Delete the part of getDuration() from old parser ***/

	/*** Should change for the new representation ****/
	static final public Test getTest() throws ParseException {
		Token t;
		Test aTest = new Test();
		Function rm;
		MathForm mf;
		t = jj_consume_token(COMPARISON);
		aTest.setComparator(t.image);
		rm = ActionFunc();
		aTest.setLeftSide(rm);
		mf = getMathForm();
		aTest.setRightSide(mf);
		{
			if (true)
				return aTest;
		}
		throw new Error("Missing return statement in function");
	}

	/*** Should take care of the last <CLOSEBRACE> for "set" *****/
	static final public MySet getSet() throws ParseException {
		Token t;
		MySet aSet = new MySet();
		Function rm;
		MathForm mf;
		if (jj_2_97(3)) {
			t = jj_consume_token(ASSIGN_MATH);
			aSet.setAssign(t.image);
		} else if (jj_2_98(3)) {
			jj_consume_token(ASSIGN);
			aSet.setAssign("=");
		} else if (jj_2_99(3)) {
			jj_consume_token(INCREASE);
			aSet.setAssign("+=");
		} else if (jj_2_100(3)) {
			jj_consume_token(DECREASE);
			aSet.setAssign("-=");
		} else if (jj_2_101(3)) {
			jj_consume_token(SCALEUP);
			aSet.setAssign("*=");
		} else if (jj_2_102(3)) {
			jj_consume_token(SCALEDOWN);
			aSet.setAssign("/=");
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		rm = ActionFunc();
		aSet.setLeftSide(rm);
		mf = getMathForm();
		aSet.setRightSide(mf);
		{
			if (true)
				return aSet;
		}
		throw new Error("Missing return statement in function");
	}

	/**** Get the Math Formular for Test/Set ******/
	static final public MathForm getMathForm() throws ParseException {
		Token t;
		MathForm mf = new MathForm();
		Function f;
		MathForm mf1, mf2;
		if (jj_2_107(3)) {
			mf = PrimaryMF();
			{
				if (true)
					return mf;
			}
		} else if (jj_2_108(3)) {
			if (jj_2_103(3)) {
				t = jj_consume_token(PLUS);
			} else if (jj_2_104(3)) {
				t = jj_consume_token(MINUS);
			} else if (jj_2_105(3)) {
				t = jj_consume_token(MUL);
			} else if (jj_2_106(3)) {
				t = jj_consume_token(DIVIDE);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			mf1 = getMathForm();
			mf2 = getMathForm();
			mf.setType(3);
			mf.setOperator(t.image.charAt(0));
			mf.setLeft(mf1);
			mf.setRight(mf2);
			{
				if (true)
					return mf;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/*** Primary (Simple) Math Formular ****/
	static final public MathForm PrimaryMF() throws ParseException {
		Token t;
		MathForm mf = new MathForm();
		Function f;
		if (jj_2_109(3)) {
			t = jj_consume_token(A_NUMBER);
			mf.setType(1);
			mf.setValue((new Float(t.image)).floatValue());
			{
				if (true)
					return mf;
			}
		} else if (jj_2_110(3)) {
			f = ActionFunc();
			mf.setType(0);
			mf.setElement(f);
			{
				if (true)
					return mf;
			}
		} else if (jj_2_111(3)) {
			jj_consume_token(OPENBRACE);
			mf = getMathForm();
			jj_consume_token(CLOSEBRACE);
			{
				if (true)
					return mf;
			}
		} else if (jj_2_112(3)) {
			t = jj_consume_token(DURATION_VAR);
			mf.setType(5);
			{
				if (true)
					return mf;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	static final public void ObjEqualityCheck() throws ParseException {
		jj_consume_token(OPENBRACE);
		jj_consume_token(NOT);
		jj_consume_token(OPENBRACE);
		jj_consume_token(EQUAL);
		label_26: while (true) {
			jj_consume_token(VAR);
			if (jj_2_113(3)) {
				;
			} else {
				break label_26;
			}
		}
		jj_consume_token(CLOSEBRACE);
		jj_consume_token(CLOSEBRACE);
	}

	/****************************************************************
	 * Finish Parsing DOMAIN. -->> Start Parsing Problem.....
	 ****************************************************************/
	static final public Problem parse_problem_pddl() throws ParseException {
		Problem prob = new Problem();
		String s;
		ArrayList aArrayList = new ArrayList();
		Predicate p = new Predicate();
		Function f = new Function();
		Token t;
		MathForm m;
		boolean isTyped = false;
		s = ProblemName();
		prob.setName(s);
		jj_consume_token(OPENBRACE);
		jj_consume_token(DOMAIN_TAG);
		t = jj_consume_token(NAME);
		jj_consume_token(CLOSEBRACE);
		prob.setDomain(t.image.toLowerCase());
		jj_consume_token(OPENBRACE);
		jj_consume_token(OBJECT);
		aArrayList.clear();
		label_27: while (true) {
			if (jj_2_114(3)) {
				;
			} else {
				break label_27;
			}
			label_28: while (true) {
				t = jj_consume_token(NAME);
				aArrayList.add(t.image.toLowerCase());
				if (jj_2_115(3)) {
					;
				} else {
					break label_28;
				}
			}
			if (jj_2_116(3)) {
				jj_consume_token(MINUS);
				isTyped = true;
				t = jj_consume_token(NAME);
				prob.addObjectType(t.image.toLowerCase(), aArrayList);
				aArrayList.clear();
			} else {
				;
			}
		}
		jj_consume_token(CLOSEBRACE);
		if (!isTyped)
			prob.addObjectType("basic_type", aArrayList);
		jj_consume_token(OPENBRACE);
		jj_consume_token(INIT);
		label_29: while (true) {
			if (jj_2_117(3)) {
				;
			} else {
				break label_29;
			}
			if (jj_2_120(3)) {
				jj_consume_token(OPENBRACE);
				jj_consume_token(AT);
				t = jj_consume_token(A_NUMBER);
				if (jj_2_118(3)) {
					p = ProbPred();
					prob.addExoEvent(p, new Float(t.image).floatValue(), false);
				} else if (jj_2_119(3)) {
					jj_consume_token(OPENBRACE);
					jj_consume_token(NOT);
					p = ProbPred();
					prob.addExoEvent(p, new Float(t.image).floatValue(), true);
					jj_consume_token(CLOSEBRACE);
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
				jj_consume_token(CLOSEBRACE);
			} else if (jj_2_121(3)) {
				p = ProbPred();
				prob.addInitPred(p);
			} else if (jj_2_122(3)) {
				jj_consume_token(OPENBRACE);
				jj_consume_token(EQUAL);
				f = ProbFunc();
				t = jj_consume_token(A_NUMBER);
				f.setValue((new Float(t.image)).floatValue());
				prob.addInitFunct(f);
				jj_consume_token(CLOSEBRACE);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		jj_consume_token(CLOSEBRACE);
		jj_consume_token(OPENBRACE);
		jj_consume_token(GOAL);
		if (jj_2_123(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(AND);
		} else {
			;
		}
		label_30: while (true) {
			if (jj_2_124(3)) {
				;
			} else {
				break label_30;
			}
			p = ProbPred();
			prob.addGoalPred(p);
			prob.putGoalTime(p, new Float(0));
			if (jj_2_125(3)) {
				jj_consume_token(MINUS);
				t = jj_consume_token(A_NUMBER);
				prob.putGoalTime(p, new Float(t.image));
				prob.setDeadlineFlag();
			} else {
				;
			}
		}
		if (jj_2_126(3)) {
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		jj_consume_token(CLOSEBRACE);
		if (jj_2_129(3)) {
			jj_consume_token(OPENBRACE);
			jj_consume_token(METRIC);
			if (jj_2_127(3)) {
				jj_consume_token(MINIMIZE);
			} else if (jj_2_128(3)) {
				jj_consume_token(MAXIMIZE);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			m = getMathForm();
			jj_consume_token(CLOSEBRACE);
		} else {
			;
		}
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return prob;
		}
		throw new Error("Missing return statement in function");
	}

	/******/
	static final public String ProblemName() throws ParseException {
		Token t;
		jj_consume_token(OPENBRACE);
		jj_consume_token(DEFINE);
		jj_consume_token(OPENBRACE);
		jj_consume_token(PROBLEM);
		t = jj_consume_token(NAME);
		jj_consume_token(CLOSEBRACE);
		{
			if (true)
				return t.image;
		}
		throw new Error("Missing return statement in function");
	}

	static final private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	static final private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	static final private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	static final private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	static final private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	static final private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	static final private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	static final private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	static final private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	static final private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	static final private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	static final private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	static final private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	static final private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	static final private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	static final private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	static final private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	static final private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(17, xla);
		}
	}

	static final private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(18, xla);
		}
	}

	static final private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(19, xla);
		}
	}

	static final private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(20, xla);
		}
	}

	static final private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(21, xla);
		}
	}

	static final private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_23();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(22, xla);
		}
	}

	static final private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_24();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(23, xla);
		}
	}

	static final private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_25();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(24, xla);
		}
	}

	static final private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_26();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(25, xla);
		}
	}

	static final private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_27();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(26, xla);
		}
	}

	static final private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_28();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(27, xla);
		}
	}

	static final private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_29();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(28, xla);
		}
	}

	static final private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_30();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(29, xla);
		}
	}

	static final private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_31();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(30, xla);
		}
	}

	static final private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_32();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(31, xla);
		}
	}

	static final private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_33();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(32, xla);
		}
	}

	static final private boolean jj_2_34(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_34();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(33, xla);
		}
	}

	static final private boolean jj_2_35(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_35();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(34, xla);
		}
	}

	static final private boolean jj_2_36(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_36();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(35, xla);
		}
	}

	static final private boolean jj_2_37(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_37();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(36, xla);
		}
	}

	static final private boolean jj_2_38(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_38();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(37, xla);
		}
	}

	static final private boolean jj_2_39(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_39();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(38, xla);
		}
	}

	static final private boolean jj_2_40(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_40();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(39, xla);
		}
	}

	static final private boolean jj_2_41(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_41();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(40, xla);
		}
	}

	static final private boolean jj_2_42(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_42();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(41, xla);
		}
	}

	static final private boolean jj_2_43(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_43();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(42, xla);
		}
	}

	static final private boolean jj_2_44(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_44();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(43, xla);
		}
	}

	static final private boolean jj_2_45(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_45();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(44, xla);
		}
	}

	static final private boolean jj_2_46(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_46();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(45, xla);
		}
	}

	static final private boolean jj_2_47(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_47();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(46, xla);
		}
	}

	static final private boolean jj_2_48(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_48();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(47, xla);
		}
	}

	static final private boolean jj_2_49(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_49();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(48, xla);
		}
	}

	static final private boolean jj_2_50(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_50();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(49, xla);
		}
	}

	static final private boolean jj_2_51(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_51();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(50, xla);
		}
	}

	static final private boolean jj_2_52(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_52();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(51, xla);
		}
	}

	static final private boolean jj_2_53(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_53();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(52, xla);
		}
	}

	static final private boolean jj_2_54(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_54();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(53, xla);
		}
	}

	static final private boolean jj_2_55(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_55();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(54, xla);
		}
	}

	static final private boolean jj_2_56(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_56();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(55, xla);
		}
	}

	static final private boolean jj_2_57(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_57();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(56, xla);
		}
	}

	static final private boolean jj_2_58(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_58();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(57, xla);
		}
	}

	static final private boolean jj_2_59(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_59();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(58, xla);
		}
	}

	static final private boolean jj_2_60(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_60();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(59, xla);
		}
	}

	static final private boolean jj_2_61(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_61();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(60, xla);
		}
	}

	static final private boolean jj_2_62(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_62();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(61, xla);
		}
	}

	static final private boolean jj_2_63(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_63();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(62, xla);
		}
	}

	static final private boolean jj_2_64(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_64();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(63, xla);
		}
	}

	static final private boolean jj_2_65(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_65();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(64, xla);
		}
	}

	static final private boolean jj_2_66(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_66();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(65, xla);
		}
	}

	static final private boolean jj_2_67(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_67();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(66, xla);
		}
	}

	static final private boolean jj_2_68(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_68();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(67, xla);
		}
	}

	static final private boolean jj_2_69(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_69();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(68, xla);
		}
	}

	static final private boolean jj_2_70(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_70();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(69, xla);
		}
	}

	static final private boolean jj_2_71(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_71();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(70, xla);
		}
	}

	static final private boolean jj_2_72(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_72();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(71, xla);
		}
	}

	static final private boolean jj_2_73(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_73();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(72, xla);
		}
	}

	static final private boolean jj_2_74(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_74();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(73, xla);
		}
	}

	static final private boolean jj_2_75(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_75();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(74, xla);
		}
	}

	static final private boolean jj_2_76(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_76();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(75, xla);
		}
	}

	static final private boolean jj_2_77(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_77();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(76, xla);
		}
	}

	static final private boolean jj_2_78(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_78();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(77, xla);
		}
	}

	static final private boolean jj_2_79(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_79();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(78, xla);
		}
	}

	static final private boolean jj_2_80(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_80();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(79, xla);
		}
	}

	static final private boolean jj_2_81(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_81();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(80, xla);
		}
	}

	static final private boolean jj_2_82(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_82();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(81, xla);
		}
	}

	static final private boolean jj_2_83(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_83();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(82, xla);
		}
	}

	static final private boolean jj_2_84(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_84();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(83, xla);
		}
	}

	static final private boolean jj_2_85(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_85();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(84, xla);
		}
	}

	static final private boolean jj_2_86(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_86();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(85, xla);
		}
	}

	static final private boolean jj_2_87(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_87();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(86, xla);
		}
	}

	static final private boolean jj_2_88(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_88();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(87, xla);
		}
	}

	static final private boolean jj_2_89(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_89();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(88, xla);
		}
	}

	static final private boolean jj_2_90(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_90();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(89, xla);
		}
	}

	static final private boolean jj_2_91(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_91();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(90, xla);
		}
	}

	static final private boolean jj_2_92(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_92();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(91, xla);
		}
	}

	static final private boolean jj_2_93(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_93();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(92, xla);
		}
	}

	static final private boolean jj_2_94(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_94();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(93, xla);
		}
	}

	static final private boolean jj_2_95(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_95();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(94, xla);
		}
	}

	static final private boolean jj_2_96(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_96();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(95, xla);
		}
	}

	static final private boolean jj_2_97(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_97();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(96, xla);
		}
	}

	static final private boolean jj_2_98(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_98();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(97, xla);
		}
	}

	static final private boolean jj_2_99(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_99();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(98, xla);
		}
	}

	static final private boolean jj_2_100(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_100();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(99, xla);
		}
	}

	static final private boolean jj_2_101(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_101();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(100, xla);
		}
	}

	static final private boolean jj_2_102(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_102();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(101, xla);
		}
	}

	static final private boolean jj_2_103(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_103();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(102, xla);
		}
	}

	static final private boolean jj_2_104(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_104();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(103, xla);
		}
	}

	static final private boolean jj_2_105(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_105();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(104, xla);
		}
	}

	static final private boolean jj_2_106(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_106();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(105, xla);
		}
	}

	static final private boolean jj_2_107(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_107();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(106, xla);
		}
	}

	static final private boolean jj_2_108(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_108();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(107, xla);
		}
	}

	static final private boolean jj_2_109(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_109();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(108, xla);
		}
	}

	static final private boolean jj_2_110(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_110();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(109, xla);
		}
	}

	static final private boolean jj_2_111(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_111();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(110, xla);
		}
	}

	static final private boolean jj_2_112(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_112();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(111, xla);
		}
	}

	static final private boolean jj_2_113(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_113();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(112, xla);
		}
	}

	static final private boolean jj_2_114(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_114();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(113, xla);
		}
	}

	static final private boolean jj_2_115(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_115();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(114, xla);
		}
	}

	static final private boolean jj_2_116(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_116();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(115, xla);
		}
	}

	static final private boolean jj_2_117(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_117();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(116, xla);
		}
	}

	static final private boolean jj_2_118(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_118();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(117, xla);
		}
	}

	static final private boolean jj_2_119(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_119();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(118, xla);
		}
	}

	static final private boolean jj_2_120(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_120();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(119, xla);
		}
	}

	static final private boolean jj_2_121(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_121();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(120, xla);
		}
	}

	static final private boolean jj_2_122(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_122();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(121, xla);
		}
	}

	static final private boolean jj_2_123(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_123();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(122, xla);
		}
	}

	static final private boolean jj_2_124(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_124();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(123, xla);
		}
	}

	static final private boolean jj_2_125(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_125();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(124, xla);
		}
	}

	static final private boolean jj_2_126(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_126();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(125, xla);
		}
	}

	static final private boolean jj_2_127(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_127();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(126, xla);
		}
	}

	static final private boolean jj_2_128(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_128();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(127, xla);
		}
	}

	static final private boolean jj_2_129(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_129();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(128, xla);
		}
	}

	static final private boolean jj_3_79() {
		if (jj_scan_token(COST))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_77()) {
			jj_scanpos = xsp;
			if (jj_3_78())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_75() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_74() {
		Token xsp;
		if (jj_3_75())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_75()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_76())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_76() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_113() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_37() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_36() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_38() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NAME))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_37()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3R_43() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_38()) {
			jj_scanpos = xsp;
			if (jj_3_39())
				return true;
		}
		return false;
	}

	static final private boolean jj_3R_38() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NOT))
			return true;
		if (jj_scan_token(OPENBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_62() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_112() {
		if (jj_scan_token(DURATION_VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_111() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_3R_35())
			return true;
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_106() {
		if (jj_scan_token(DIVIDE))
			return true;
		return false;
	}

	static final private boolean jj_3_73() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_34() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_33() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_70() {
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_110() {
		if (jj_3R_41())
			return true;
		return false;
	}

	static final private boolean jj_3_69() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_35() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NAME))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_34()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3R_41() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_35()) {
			jj_scanpos = xsp;
			if (jj_3_36())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_105() {
		if (jj_scan_token(MUL))
			return true;
		return false;
	}

	static final private boolean jj_3_61() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_10() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_71() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3R_40() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_109()) {
			jj_scanpos = xsp;
			if (jj_3_110()) {
				jj_scanpos = xsp;
				if (jj_3_111()) {
					jj_scanpos = xsp;
					if (jj_3_112())
						return true;
				}
			}
		}
		return false;
	}

	static final private boolean jj_3_109() {
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static final private boolean jj_3_64() {
		if (jj_scan_token(START))
			return true;
		return false;
	}

	static final private boolean jj_3_104() {
		if (jj_scan_token(MINUS))
			return true;
		return false;
	}

	static final private boolean jj_3_59() {
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_67() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_31() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_66() {
		if (jj_scan_token(OPENBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_9() {
		if (jj_3R_31())
			return true;
		return false;
	}

	static final private boolean jj_3_30() {
		Token xsp;
		if (jj_3_31())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_31()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_29() {
		if (jj_3R_33())
			return true;
		return false;
	}

	static final private boolean jj_3_63() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	static final private boolean jj_3_68() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_66())
			jj_scanpos = xsp;
		if (jj_3R_39())
			return true;
		return false;
	}

	static final private boolean jj_3_65() {
		if (jj_scan_token(END))
			return true;
		return false;
	}

	static final private boolean jj_3_103() {
		if (jj_scan_token(PLUS))
			return true;
		return false;
	}

	static final private boolean jj_3_32() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NAME))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_30()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_108() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_103()) {
			jj_scanpos = xsp;
			if (jj_3_104()) {
				jj_scanpos = xsp;
				if (jj_3_105()) {
					jj_scanpos = xsp;
					if (jj_3_106())
						return true;
				}
			}
		}
		if (jj_3R_35())
			return true;
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3R_33() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_32()) {
			jj_scanpos = xsp;
			if (jj_3_33())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_72() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_64()) {
			jj_scanpos = xsp;
			if (jj_3_65())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_60() {
		if (jj_3R_38())
			return true;
		return false;
	}

	static final private boolean jj_3R_35() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_107()) {
			jj_scanpos = xsp;
			if (jj_3_108())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_107() {
		if (jj_3R_40())
			return true;
		return false;
	}

	static final private boolean jj_3_53() {
		if (jj_scan_token(AT))
			return true;
		if (jj_scan_token(START))
			return true;
		return false;
	}

	static final private boolean jj_3_57() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_6() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_56() {
		if (jj_scan_token(OPENBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_51() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	static final private boolean jj_3_58() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_56())
			jj_scanpos = xsp;
		if (jj_3R_36())
			return true;
		return false;
	}

	static final private boolean jj_3_55() {
		if (jj_scan_token(AT))
			return true;
		if (jj_scan_token(END))
			return true;
		return false;
	}

	static final private boolean jj_3_5() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_7() {
		Token xsp;
		if (jj_3_5())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_5()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_6())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_54() {
		if (jj_scan_token(OVER))
			return true;
		if (jj_scan_token(ALL))
			return true;
		return false;
	}

	static final private boolean jj_3R_31() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(FUNCTION))
			return true;
		Token xsp;
		if (jj_3_29())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_29()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static final private boolean jj_3_8() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(CONSTANTS))
			return true;
		Token xsp;
		if (jj_3_7())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_7()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static final private boolean jj_3_27() {
		if (jj_scan_token(AT))
			return true;
		return false;
	}

	static final private boolean jj_3_52() {
		if (jj_scan_token(OPENBRACE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_53()) {
			jj_scanpos = xsp;
			if (jj_3_54()) {
				jj_scanpos = xsp;
				if (jj_3_55())
					return true;
			}
		}
		return false;
	}

	static final private boolean jj_3_102() {
		if (jj_scan_token(SCALEDOWN))
			return true;
		return false;
	}

	static final private boolean jj_3_101() {
		if (jj_scan_token(SCALEUP))
			return true;
		return false;
	}

	static final private boolean jj_3_128() {
		if (jj_scan_token(MAXIMIZE))
			return true;
		return false;
	}

	static final private boolean jj_3_48() {
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static final private boolean jj_3_49() {
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3_100() {
		if (jj_scan_token(DECREASE))
			return true;
		return false;
	}

	static final private boolean jj_3_2() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_26() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_99() {
		if (jj_scan_token(INCREASE))
			return true;
		return false;
	}

	static final private boolean jj_3_1() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_98() {
		if (jj_scan_token(ASSIGN))
			return true;
		return false;
	}

	static final private boolean jj_3_3() {
		Token xsp;
		if (jj_3_1())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_1()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_2())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_50() {
		if (jj_scan_token(COST))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_48()) {
			jj_scanpos = xsp;
			if (jj_3_49())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_28() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_47() {
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3_127() {
		if (jj_scan_token(MINIMIZE))
			return true;
		return false;
	}

	static final private boolean jj_3_4() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(TYPES))
			return true;
		Token xsp;
		if (jj_3_3())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_3()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static final private boolean jj_3_97() {
		if (jj_scan_token(ASSIGN_MATH))
			return true;
		return false;
	}

	static final private boolean jj_3_22() {
		if (jj_scan_token(AT))
			return true;
		return false;
	}

	static final private boolean jj_3R_39() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_97()) {
			jj_scanpos = xsp;
			if (jj_3_98()) {
				jj_scanpos = xsp;
				if (jj_3_99()) {
					jj_scanpos = xsp;
					if (jj_3_100()) {
						jj_scanpos = xsp;
						if (jj_3_101()) {
							jj_scanpos = xsp;
							if (jj_3_102())
								return true;
						}
					}
				}
			}
		}
		if (jj_3R_41())
			return true;
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3R_42() {
		if (jj_scan_token(OPENBRACE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_26()) {
			jj_scanpos = xsp;
			if (jj_3_27())
				return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_28()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_46() {
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static final private boolean jj_3_25() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_44() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_21() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_43() {
		Token xsp;
		if (jj_3_44())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_44()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_45())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_121() {
		if (jj_3R_42())
			return true;
		return false;
	}

	static final private boolean jj_3_123() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	static final private boolean jj_3_126() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_118() {
		if (jj_3R_42())
			return true;
		return false;
	}

	static final private boolean jj_3_24() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_17() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_45() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_23() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_24()) {
			jj_scanpos = xsp;
			if (jj_3_25())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_129() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(METRIC))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_127()) {
			jj_scanpos = xsp;
			if (jj_3_128())
				return true;
		}
		return false;
	}

	static final private boolean jj_3R_37() {
		if (jj_scan_token(OPENBRACE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_21()) {
			jj_scanpos = xsp;
			if (jj_3_22())
				return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_23()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3R_36() {
		if (jj_scan_token(COMPARISON))
			return true;
		if (jj_3R_41())
			return true;
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3_96() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_125() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static final private boolean jj_3_93() {
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_87() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_124() {
		if (jj_3R_42())
			return true;
		return false;
	}

	static final private boolean jj_3_92() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_20() {
		if (jj_scan_token(MINUS))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_18()) {
			jj_scanpos = xsp;
			if (jj_3_19())
				return true;
		}
		return false;
	}

	static final private boolean jj_3_14() {
		if (jj_scan_token(AT))
			return true;
		return false;
	}

	static final private boolean jj_3_122() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static final private boolean jj_3_95() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_19() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(EITHER))
			return true;
		Token xsp;
		if (jj_3_17())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_17()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static final private boolean jj_3_119() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_42())
			return true;
		return false;
	}

	static final private boolean jj_3_85() {
		if (jj_3R_37())
			return true;
		return false;
	}

	static final private boolean jj_3_41() {
		if (jj_scan_token(ACTION))
			return true;
		return false;
	}

	static final private boolean jj_3_18() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_13() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_90() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_120() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AT))
			return true;
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static final private boolean jj_3_117() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_120()) {
			jj_scanpos = xsp;
			if (jj_3_121()) {
				jj_scanpos = xsp;
				if (jj_3_122())
					return true;
			}
		}
		return false;
	}

	static final private boolean jj_3_88() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	static final private boolean jj_3_89() {
		if (jj_scan_token(OPENBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_42() {
		if (jj_scan_token(DURATIVE_ACTION))
			return true;
		return false;
	}

	static final private boolean jj_3_94() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_91()) {
			jj_scanpos = xsp;
			if (jj_3_92()) {
				jj_scanpos = xsp;
				if (jj_3_93())
					return true;
			}
		}
		return false;
	}

	static final private boolean jj_3_91() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_89())
			jj_scanpos = xsp;
		if (jj_3R_39())
			return true;
		return false;
	}

	static final private boolean jj_3_16() {
		if (jj_scan_token(VAR))
			return true;
		return false;
	}

	static final private boolean jj_3_15() {
		Token xsp;
		if (jj_3_16())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_16()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_20())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_12() {
		if (jj_3R_32())
			return true;
		return false;
	}

	static final private boolean jj_3_86() {
		if (jj_3R_38())
			return true;
		return false;
	}

	static final private boolean jj_3R_34() {
		if (jj_scan_token(OPENBRACE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_41()) {
			jj_scanpos = xsp;
			if (jj_3_42())
				return true;
		}
		return false;
	}

	static final private boolean jj_3R_32() {
		if (jj_scan_token(OPENBRACE))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_13()) {
			jj_scanpos = xsp;
			if (jj_3_14())
				return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_15()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_116() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_83() {
		if (jj_scan_token(CLOSEBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_82() {
		if (jj_scan_token(OPENBRACE))
			return true;
		return false;
	}

	static final private boolean jj_3_84() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_82())
			jj_scanpos = xsp;
		if (jj_3R_36())
			return true;
		return false;
	}

	static final private boolean jj_3_81() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_84()) {
			jj_scanpos = xsp;
			if (jj_3_85()) {
				jj_scanpos = xsp;
				if (jj_3_86())
					return true;
			}
		}
		return false;
	}

	static final private boolean jj_3_80() {
		if (jj_scan_token(OPENBRACE))
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	static final private boolean jj_3_115() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_114() {
		Token xsp;
		if (jj_3_115())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_115()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3_116())
			jj_scanpos = xsp;
		return false;
	}

	static final private boolean jj_3_11() {
		if (jj_scan_token(REQUIREMENT))
			return true;
		return false;
	}

	static final private boolean jj_3_39() {
		if (jj_scan_token(NAME))
			return true;
		return false;
	}

	static final private boolean jj_3_40() {
		if (jj_3R_34())
			return true;
		return false;
	}

	static final private boolean jj_3_78() {
		if (jj_3R_35())
			return true;
		return false;
	}

	static final private boolean jj_3_77() {
		if (jj_scan_token(A_NUMBER))
			return true;
		return false;
	}

	static private boolean jj_initialized_once = false;
	static public PDDL21ParserTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	static public Token token, jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static public boolean lookingAhead = false;
	static private boolean jj_semLA;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static {
		jj_la1_0();
		jj_la1_1();
		jj_la1_2();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] {};
	}

	private static void jj_la1_1() {
		jj_la1_1 = new int[] {};
	}

	private static void jj_la1_2() {
		jj_la1_2 = new int[] {};
	}

	static final private JJCalls[] jj_2_rtns = new JJCalls[129];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	public PDDL21Parser(java.io.InputStream stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new PDDL21ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	static public void ReInit(java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public PDDL21Parser(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new PDDL21ParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public PDDL21Parser(PDDL21ParserTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  You must");
			System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(PDDL21ParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	static final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	static final private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	static final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	static final public Token getToken(int index) {
		Token t = lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	static private java.util.Vector jj_expentries = new java.util.Vector();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;
			for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
				int[] oldentry = (int[]) (e.nextElement());
				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists)
						break;
				}
			}
			if (!exists)
				jj_expentries.addElement(jj_expentry);
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	static public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[66];
		for (int i = 0; i < 66; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 66; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	static final public void enable_tracing() {
	}

	static final public void disable_tracing() {
	}

	static final private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 129; i++) {
			JJCalls p = jj_2_rtns[i];
			do {
				if (p.gen > jj_gen) {
					jj_la = p.arg;
					jj_lastpos = jj_scanpos = p.first;
					switch (i) {
					case 0:
						jj_3_1();
						break;
					case 1:
						jj_3_2();
						break;
					case 2:
						jj_3_3();
						break;
					case 3:
						jj_3_4();
						break;
					case 4:
						jj_3_5();
						break;
					case 5:
						jj_3_6();
						break;
					case 6:
						jj_3_7();
						break;
					case 7:
						jj_3_8();
						break;
					case 8:
						jj_3_9();
						break;
					case 9:
						jj_3_10();
						break;
					case 10:
						jj_3_11();
						break;
					case 11:
						jj_3_12();
						break;
					case 12:
						jj_3_13();
						break;
					case 13:
						jj_3_14();
						break;
					case 14:
						jj_3_15();
						break;
					case 15:
						jj_3_16();
						break;
					case 16:
						jj_3_17();
						break;
					case 17:
						jj_3_18();
						break;
					case 18:
						jj_3_19();
						break;
					case 19:
						jj_3_20();
						break;
					case 20:
						jj_3_21();
						break;
					case 21:
						jj_3_22();
						break;
					case 22:
						jj_3_23();
						break;
					case 23:
						jj_3_24();
						break;
					case 24:
						jj_3_25();
						break;
					case 25:
						jj_3_26();
						break;
					case 26:
						jj_3_27();
						break;
					case 27:
						jj_3_28();
						break;
					case 28:
						jj_3_29();
						break;
					case 29:
						jj_3_30();
						break;
					case 30:
						jj_3_31();
						break;
					case 31:
						jj_3_32();
						break;
					case 32:
						jj_3_33();
						break;
					case 33:
						jj_3_34();
						break;
					case 34:
						jj_3_35();
						break;
					case 35:
						jj_3_36();
						break;
					case 36:
						jj_3_37();
						break;
					case 37:
						jj_3_38();
						break;
					case 38:
						jj_3_39();
						break;
					case 39:
						jj_3_40();
						break;
					case 40:
						jj_3_41();
						break;
					case 41:
						jj_3_42();
						break;
					case 42:
						jj_3_43();
						break;
					case 43:
						jj_3_44();
						break;
					case 44:
						jj_3_45();
						break;
					case 45:
						jj_3_46();
						break;
					case 46:
						jj_3_47();
						break;
					case 47:
						jj_3_48();
						break;
					case 48:
						jj_3_49();
						break;
					case 49:
						jj_3_50();
						break;
					case 50:
						jj_3_51();
						break;
					case 51:
						jj_3_52();
						break;
					case 52:
						jj_3_53();
						break;
					case 53:
						jj_3_54();
						break;
					case 54:
						jj_3_55();
						break;
					case 55:
						jj_3_56();
						break;
					case 56:
						jj_3_57();
						break;
					case 57:
						jj_3_58();
						break;
					case 58:
						jj_3_59();
						break;
					case 59:
						jj_3_60();
						break;
					case 60:
						jj_3_61();
						break;
					case 61:
						jj_3_62();
						break;
					case 62:
						jj_3_63();
						break;
					case 63:
						jj_3_64();
						break;
					case 64:
						jj_3_65();
						break;
					case 65:
						jj_3_66();
						break;
					case 66:
						jj_3_67();
						break;
					case 67:
						jj_3_68();
						break;
					case 68:
						jj_3_69();
						break;
					case 69:
						jj_3_70();
						break;
					case 70:
						jj_3_71();
						break;
					case 71:
						jj_3_72();
						break;
					case 72:
						jj_3_73();
						break;
					case 73:
						jj_3_74();
						break;
					case 74:
						jj_3_75();
						break;
					case 75:
						jj_3_76();
						break;
					case 76:
						jj_3_77();
						break;
					case 77:
						jj_3_78();
						break;
					case 78:
						jj_3_79();
						break;
					case 79:
						jj_3_80();
						break;
					case 80:
						jj_3_81();
						break;
					case 81:
						jj_3_82();
						break;
					case 82:
						jj_3_83();
						break;
					case 83:
						jj_3_84();
						break;
					case 84:
						jj_3_85();
						break;
					case 85:
						jj_3_86();
						break;
					case 86:
						jj_3_87();
						break;
					case 87:
						jj_3_88();
						break;
					case 88:
						jj_3_89();
						break;
					case 89:
						jj_3_90();
						break;
					case 90:
						jj_3_91();
						break;
					case 91:
						jj_3_92();
						break;
					case 92:
						jj_3_93();
						break;
					case 93:
						jj_3_94();
						break;
					case 94:
						jj_3_95();
						break;
					case 95:
						jj_3_96();
						break;
					case 96:
						jj_3_97();
						break;
					case 97:
						jj_3_98();
						break;
					case 98:
						jj_3_99();
						break;
					case 99:
						jj_3_100();
						break;
					case 100:
						jj_3_101();
						break;
					case 101:
						jj_3_102();
						break;
					case 102:
						jj_3_103();
						break;
					case 103:
						jj_3_104();
						break;
					case 104:
						jj_3_105();
						break;
					case 105:
						jj_3_106();
						break;
					case 106:
						jj_3_107();
						break;
					case 107:
						jj_3_108();
						break;
					case 108:
						jj_3_109();
						break;
					case 109:
						jj_3_110();
						break;
					case 110:
						jj_3_111();
						break;
					case 111:
						jj_3_112();
						break;
					case 112:
						jj_3_113();
						break;
					case 113:
						jj_3_114();
						break;
					case 114:
						jj_3_115();
						break;
					case 115:
						jj_3_116();
						break;
					case 116:
						jj_3_117();
						break;
					case 117:
						jj_3_118();
						break;
					case 118:
						jj_3_119();
						break;
					case 119:
						jj_3_120();
						break;
					case 120:
						jj_3_121();
						break;
					case 121:
						jj_3_122();
						break;
					case 122:
						jj_3_123();
						break;
					case 123:
						jj_3_124();
						break;
					case 124:
						jj_3_125();
						break;
					case 125:
						jj_3_126();
						break;
					case 126:
						jj_3_127();
						break;
					case 127:
						jj_3_128();
						break;
					case 128:
						jj_3_129();
						break;
					}
				}
				p = p.next;
			} while (p != null);
		}
		jj_rescan = false;
	}

	static final private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
